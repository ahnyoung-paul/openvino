// Copyright (C) 2018-2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include "include/batch_headers/common.cl"
#include "include/batch_headers/sub_group_block_read.cl"
#include "include/batch_headers/sub_group_block_write.cl"
#include "include/batch_headers/sub_group_shuffle.cl"

// JIT Parameters:
// SIMD         - sub-group size/simd width, one of {8, 16};
// TILE_B       - number of batches processed by each work-item;
// TILE_OFM     - number of output features calculated by work-item, one of {1, 2, 4, 8};
// TILE_IFM     - number of input features loaded from input by work-item, one of {1, 2, 4, 8};
// TILE_K       - number of input features loaded from weights, one of {1, 2, 4, 8};
// TILE_K_OFM   - must be equal to TILE_OFM * TILE_K and less or equal to 8;
// DISPATCH_FSV - output coordinates for each sub-group are calculated from linearized coordinates
// DISPATCH_BSV   as if they laid in bs_fs_bsv_fsv format, these macros describe fsv and bsv factors;

#define INPUT_LOAD_SIZE                     4

#if FC_KERNEL_DYNAMIC_QUANTIZE
KERNEL(quantize_input)(
    const __global INPUT0_TYPE* input,
    __global char* quantized_input,
    __global INPUT0_TYPE* de_quan_scale) {
    const uint offset = get_global_id(0);

    uint input_offset = offset * QUANTIZE_GROUP_SIZE;
    half4 input_0[8];
    char4 quantized_value[8];
    half  max[8];

    unroll_for (uint i = 0 ; i < 8 ; ++i) {
        input_0[i] = vload4(0, &input[input_offset + i * 4]);
        max[i] = fmax(fmax(fabs(input_0[i][0]), fabs(input_0[i][1])), fmax(fabs(input_0[i][2]), fabs(input_0[i][3])));
    }

    half max_value = fmax(fmax(fmax(max[0], max[1]), fmax(max[2], max[3])),
                            fmax(fmax(max[4], max[5]), fmax(max[6], max[7])));

    half quan_scale = max_value / 128;

    unroll_for (uint i = 0 ; i < 8 ; ++i) {
        quantized_value[i] = CAT(convert_, MAKE_VECTOR_TYPE(char, INPUT_LOAD_SIZE))(input_0[i] / (half4)quan_scale);
        vstore4(quantized_value[i], 0, &quantized_input[input_offset + i * 4]);
    }

    de_quan_scale[offset] = quan_scale;
}
#else  // !FC_KERNEL_DYNAMIC_QUANTIZE

// Verify JIT parameters.
#if SIMD != 8 && SIMD != 16
#   error "fully_connected_gpu_bf_tiled.cl - SIMD must be one of {8, 16}"
#endif

#if TILE_OFM != 1 && TILE_OFM != 2 && TILE_OFM != 4 && TILE_OFM != 8
#   error "fully_connected_gpu_bf_tiled.cl - TILE_OFM must be one of {1, 2, 4, 8}"
#endif

#if TILE_IFM != 1 && TILE_IFM != 2 && TILE_IFM != 4 && TILE_IFM != 8
#   error "fully_connected_gpu_bf_tiled.cl - TILE_IFM must be one of {1, 2, 4, 8}"
#endif

#if TILE_K != 1 && TILE_K != 2 && TILE_K != 4 && TILE_K != 8
#   error "fully_connected_gpu_bf_tiled.cl - TILE_K must be one of {1, 2, 4, 8}"
#endif

#if TILE_K_OFM != (TILE_K * TILE_OFM) || TILE_K_OFM > 8
#   error "fully_connected_gpu_bf_tiled.cl - TILE_K_OFM must be equal to TILE_K * TILE_OFM and at most 8"
#endif

#if COMPRESSED_WEIGHTS_INT4
#   if TILE_K_OFM != TILE_K_OFM_PACKED * 2
#       error "fully_connected_gpu_bf_tiled.cl - TILE_K_OFM must be divisible by 2 for 4-bit compressed case"
#   endif
#   if FILTER_LAYOUT_OS_IS_YX_OSV32_ISV2 && TILE_K != 4 && TILE_K != 2 && TILE_K != 1
#       error "fully_connected_gpu_bf_tiled.cl - TILE_K must be one of {1, 2, 4}"
#   endif
#endif
#if TILE_K == 4 && COMPRESSED_WEIGHTS_INT4 && FILTER_LAYOUT_OS_IS_YX_OSV32_ISV2
// Data stored in memory : f0k0k1|f16k0k1|f0k2k3|f16k2k3
// => unpack as f0k0k1|f0k2k3|f16k0k1|f16k2k3 so that the weight access order is preserved 
#define UNPACK_INT4 UNPACK_INT4x2_OSV32_ISV2
#define UNPACK_TRANSPOSED_INT4 UNPACK_INT4x2_OSV32_ISV2
#else
#define UNPACK_INT4 UNPACK_INT4x2
#define UNPACK_TRANSPOSED_INT4 UNPACK_TRANSPOSED_INT4x2
#endif
// Macros for vectorized types.
#define INPUT_VEC_TYPE             MAKE_VECTOR_TYPE(INPUT0_TYPE, TILE_IFM)
#define ACCUMULATOR_VEC_TYPE       MAKE_VECTOR_TYPE(ACCUMULATOR_TYPE, TILE_OFM)
#define FILTER_VEC_TYPE            MAKE_VECTOR_TYPE(ACCUMULATOR_TYPE, TILE_K_OFM)
#define FILTER_PACKED_VEC_TYPE     MAKE_VECTOR_TYPE(FILTER_TYPE, TILE_K_OFM_PACKED)
#define BIAS_VEC_TYPE              MAKE_VECTOR_TYPE(BIAS_TYPE, TILE_OFM)
#define OUTPUT_VEC_TYPE            MAKE_VECTOR_TYPE(OUTPUT_TYPE, TILE_OFM)
#define ACTIVATION_VEC_TYPE        MAKE_VECTOR_TYPE(ACTIVATION_TYPE, TILE_OFM)
#define TO_OUTPUT_VEC_TYPE(x)      CAT(convert_, OUTPUT_VEC_TYPE)(x)
#define TO_ACTIVATION_VEC_TYPE(x)  CAT(convert_, ACTIVATION_VEC_TYPE)(x)
#define TO_FILTER_VEC_TYPE(x)      CAT(convert_, FILTER_VEC_TYPE)(x)
#define TO_ACCUMULATOR_VEC_TYPE(x) CAT(convert_, ACCUMULATOR_VEC_TYPE)(x)

#define INPUT_BLOCK_READ(ptr, offset)        BLOCK_READN(INPUT0_TYPE, TILE_IFM, ptr, offset)
#define FILTER_BLOCK_READ(ptr, offset)       BLOCK_READN(FILTER_TYPE, TILE_K_OFM_PACKED, ptr, offset)
#define BIAS_BLOCK_READ(ptr, offset)         BLOCK_READN(BIAS_TYPE, TILE_OFM, ptr, offset)
#define OUTPUT_BLOCK_WRITE(ptr, offset, val) BLOCK_WRITEN(OUTPUT_TYPE, TILE_OFM, ptr, offset, val)

#define SLM_FILTER_VEC          MAKE_VECTOR_TYPE(ACCUMULATOR_TYPE, TILE_OFM)
#define SLM_FILTER_PACKED_VEC   MAKE_VECTOR_TYPE(FILTER_TYPE, FILTER_LOAD_BLOCK_SIZE)
#define SLM_FILTER_UNPACKED_VEC MAKE_VECTOR_TYPE(ACCUMULATOR_TYPE, FILTER_ELEMENTS_PER_LOAD)


// Check alignment restrictions for using block writes on output.
#define USE_BLOCK_WRITE ((OUTPUT_TYPE_SIZE * TILE_OUT_B_PITCH) % 16 == 0 && (OUTPUT_TYPE_SIZE * OUTPUT_OFFSET) % 16 == 0)


#if !REALIGN_FP16_OFFSET
#   if OUTPUT_3D
#       define MAIN_LOOP_ELEMENTS_COUNT  INPUT0_SIZE_Y
#   else
#       define MAIN_LOOP_ELEMENTS_COUNT  INPUT0_ELEMENTS_COUNT
#   endif
#else
// For REALIGN_FP16_OFFSET one feature is processed separately before entering main loop to correct alignment.
#   if OUTPUT_3D
#       define MAIN_LOOP_ELEMENTS_COUNT  (INPUT0_SIZE_Y - 1)
#   else
#       define MAIN_LOOP_ELEMENTS_COUNT  (INPUT0_ELEMENTS_COUNT - 1)
#   endif
#endif

#if OUTPUT_3D
#   define INPUT_ELEMENTS_COUNT INPUT0_SIZE_Y
#else
#   define INPUT_ELEMENTS_COUNT INPUT0_ELEMENTS_COUNT
#endif

#if IS_DYNAMIC && COMPRESSED_WEIGHTS_INT4
#pragma disable_includes_optimization
#define FORCED_TILE_B 1
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 2
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 3
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 4
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 5
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 6
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B

#define FORCED_TILE_B 7
#include "include/fully_connected_gpu_bf_tiled_common.cl"
#undef FORCED_TILE_B
#pragma enable_includes_optimization
#endif

inline void FUNC(fc_bf_tiled_kernel_default)(
    OPTIONAL_SHAPE_INFO_ARG
    const __global INPUT0_TYPE* input,
#if DECOMPRESSION_SCALE_TERM
    const __global DECOMPRESSION_SCALE_TYPE* decompression_scale,
#endif
#if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
    const __global DECOMPRESSION_ZP_TYPE* decompression_zp,
#endif
    __global OUTPUT_TYPE* output,
    const __global FILTER_TYPE* weights
#if USE_SLM
    , __local ACCUMULATOR_TYPE* wei_local_mem
#endif
#if BIAS_TERM
    , const __global BIAS_TYPE* biases
#endif
#if HAS_FUSED_OPS_DECLS
    , FUSED_OPS_DECLS
#endif
) {
#if USE_SLM
    uint gid = (uint)get_group_id(0);
    uint local_id = (uint)get_local_id(2);
#else
    uint gid = (uint)get_group_id(0);
#endif
    uint sglid = (uint)get_sub_group_local_id();

    // Dispatch as bs_fs_bsv_fsv, where bsv = DISPATCH_BSV and fsv = DISPATCH_FSV.
    // This allows more fine grained control over dispatch order than using work-groups and
    // avoids requirement of threads being available for whole work-group.
    // It could hovewer have some drawbacks like not providing physical locality or not using
    // full dispatch pipeline.
    uint feature_mini_block = gid % DISPATCH_FSV;
    uint batch_mini_block = gid / DISPATCH_FSV % DISPATCH_BSV;
    uint feature_mega_block = gid / (DISPATCH_FSV * DISPATCH_BSV) % (CEIL_DIV(TILE_OUT_F_NUM, TILE_OFM * SIMD) / DISPATCH_FSV);
    uint batch_mega_block = gid / (DISPATCH_FSV * DISPATCH_BSV * CEIL_DIV(TILE_OUT_F_NUM, TILE_OFM * SIMD) / DISPATCH_FSV);

#if USE_SLM
    uint out_f = gid * (TILE_OFM * SIMD);
    uint out_b = LWS_BATCHES * TILE_B * (uint)get_group_id(2) + local_id * TILE_B;
#else
    uint out_f = (feature_mega_block * DISPATCH_FSV + feature_mini_block) * (TILE_OFM * SIMD);
    uint out_b = ((batch_mega_block * DISPATCH_BSV + batch_mini_block) * TILE_B);
#endif

#if DECOMPRESSION_SCALE_POST_OP
    bool ds_post_op = true;
#else
    bool ds_post_op = false;
#endif
    OUTPUT_TYPE debug_val = 0;
    float debug_fval = 0.f;

    uint acc_count[TILE_B][TILE_OFM] = { };

    ACCUMULATOR_VEC_TYPE acc[TILE_B] = { };

    uint calc_count = 0;

    half half_sum = 0.f;
    float float_sum = 0.f;

    half sample_data[6144]={0.000000f,-0.002642f,-0.000214f,-0.000810f,-0.000119f,-0.000000f,0.004475f,0.000162f,-0.001208f,-0.000000f,0.001935f,-0.002563f,0.003817f,-0.006695f,0.000420f,0.001076f,-0.000229f,-0.001572f,0.008690f,-0.003426f,-0.002388f,-0.001023f,0.002588f,0.002199f,0.001226f,-0.001057f,0.000000f,0.001837f,-0.000500f,-0.000706f,-0.003181f,-0.003897f,-0.008125f,0.003944f,0.000797f,-0.000908f,0.003698f,-0.008331f,0.001265f,-0.000000f,0.000120f,0.000595f,0.002056f,0.003601f,-0.000875f,0.000695f,0.000000f,0.002321f,-0.003462f,-0.000000f,0.000000f,0.000047f,-0.000938f,0.000207f,-0.004307f,0.006851f,-0.014359f,0.002480f,0.000000f,-0.000881f,0.000000f,0.004211f,-0.001341f,-0.000591f,0.001482f,0.001580f,-0.000502f,0.001786f,0.000962f,0.001531f,0.002079f,-0.000011f,-0.002586f,-0.001341f,-0.001105f,-0.005730f,0.000805f,-0.001729f,-0.000157f,-0.001328f,0.002201f,-0.001442f,-0.000341f,0.002209f,-0.006363f,-0.000412f,-0.000925f,0.001212f,-0.003496f,-0.001900f,-0.001418f,0.004425f,-0.004814f,-0.001395f,0.000505f,-0.003672f,0.000000f,0.000865f,-0.009155f,-0.006424f,-0.000834f,-0.000000f,0.000838f,0.000000f,-0.000000f,-0.003386f,-0.002718f,0.000268f,-0.006721f,-0.000000f,0.000971f,-0.004864f,-0.002872f,-0.000314f,-0.004639f,0.008369f,-0.001486f,0.000000f,-0.000270f,-0.002455f,-0.001143f,-0.000197f,0.001989f,-0.002218f,0.004612f,-0.003922f,-0.003880f,0.002552f,-0.000031f,-0.003897f,0.000640f,0.002262f,0.005756f,0.000000f,-0.000198f,-0.002508f,-0.003613f,-0.002474f,-0.000057f,0.000000f,-0.001394f,0.000764f,0.000576f,-0.000660f,-0.000000f,0.001611f,-0.009445f,-0.002827f,0.001115f,-0.000000f,0.000983f,0.001765f,-0.000861f,-0.001407f,-0.010559f,0.000691f,0.000000f,-0.003469f,0.001132f,-0.000000f,0.001524f,0.001283f,0.001363f,0.000961f,0.004345f,0.001431f,0.001943f,-0.000485f,0.000360f,-0.000000f,-0.003288f,-0.003578f,0.000979f,0.000000f,0.000640f,-0.000691f,-0.006035f,-0.003515f,-0.001321f,0.002781f,-0.005108f,0.000510f,0.000874f,0.000000f,0.000438f,-0.002357f,0.000139f,0.000000f,0.003876f,-0.000000f,0.002367f,0.001917f,-0.000718f,-0.003077f,-0.004753f,-0.002598f,-0.005001f,-0.005077f,0.004246f,0.002220f,0.005234f,
        0.004730f,0.013351f,-0.000000f,0.001155f,0.000000f,0.001844f,-0.010002f,0.000652f,0.000304f,0.003515f,-0.002829f,-0.001753f,0.001763f,0.004974f,0.000036f,0.008614f,0.000000f,-0.001148f,-0.003035f,-0.000907f,0.003254f,-0.000232f,-0.000000f,-0.000211f,-0.000922f,0.000346f,0.001016f,0.012115f,0.000000f,0.000000f,0.003210f,-0.000450f,-0.000000f,0.002296f,-0.003355f,0.003391f,-0.004017f,0.000948f,-0.001593f,-0.001312f,0.000504f,0.000644f,-0.010956f,0.001729f,0.000000f,0.001980f,-0.000511f,0.002354f,-0.000786f,0.006187f,-0.000000f,-0.006096f,0.000086f,-0.000000f,-0.000633f,0.001136f,-0.003933f,0.003922f,-0.003378f,0.001733f,0.000541f,-0.001805f,0.001272f,0.001444f,-0.000721f,-0.006054f,0.002916f,-0.000847f,-0.005966f,0.000497f,0.000680f,-0.000000f,-0.000000f,0.003035f,0.000000f,0.001886f,-0.001153f,-0.002230f,-0.000000f,0.000852f,0.000705f,-0.004425f,0.004612f,-0.000000f,-0.002453f,-0.000000f,-0.001561f,0.002470f,-0.000897f,-0.000988f,-0.000145f,-0.000967f,-0.000430f,0.002651f,0.000100f,0.001153f,-0.001290f,0.001443f,0.003754f,-0.004189f,0.005116f,-0.000544f,-0.008636f,-0.004616f,0.001795f,-0.001334f,0.001172f,0.001520f,0.003614f,0.003468f,-0.000316f,0.001140f,-0.004620f,-0.004719f,-0.013145f,-0.000751f,-0.000169f,0.003527f,-0.007210f,0.003340f,-0.002111f,0.000219f,0.000005f,0.000878f,0.000000f,-0.002037f,-0.000864f,-0.001724f,-0.000234f,-0.007084f,-0.001016f,0.003445f,-0.000000f,0.000616f,0.000575f,0.000260f,-0.000903f,-0.001336f,-0.000000f,-0.000000f,0.002893f,0.002722f,0.004532f,-0.000388f,0.003944f,-0.007652f,0.000269f,0.004288f,-0.000040f,0.002203f,0.007626f,-0.001485f,-0.004105f,-0.000861f,0.000000f,0.000011f,0.000000f,-0.000000f,-0.000000f,0.001094f,-0.002892f,-0.001574f,-0.001698f,-0.004719f,-0.001264f,0.005154f,0.001575f,0.002104f,0.001824f,0.004543f,0.000724f,0.000000f,-0.000873f,-0.002117f,-0.004814f,-0.000000f,0.005611f,0.001211f,0.003864f,0.001211f,-0.000000f,0.000000f,-0.001869f,-0.000000f,-0.000241f,0.000236f,0.000000f,-0.006916f,0.001503f,-0.003078f,0.000210f,0.004189f,0.006618f,-0.001222f,-0.004772f,-0.005768f,0.003880f,0.000491f,0.000855f,-0.001595f,
        -0.001921f,-0.004787f,-0.006413f,0.009560f,0.000738f,0.000000f,-0.007450f,0.001005f,-0.002243f,-0.000560f,0.005402f,-0.000403f,-0.006191f,0.002972f,-0.000000f,0.000521f,-0.003136f,0.000849f,0.002827f,-0.001276f,-0.004463f,-0.000000f,0.003805f,-0.000905f,0.000723f,-0.003038f,0.003386f,-0.000018f,-0.001260f,-0.001376f,-0.007328f,-0.001795f,0.000118f,0.002899f,0.000637f,-0.002010f,-0.001348f,-0.006054f,0.001285f,0.000416f,0.004055f,-0.000542f,0.000417f,0.000000f,0.001563f,-0.002855f,0.007500f,-0.000125f,0.000724f,0.000062f,-0.000680f,-0.001643f,0.002632f,-0.001281f,-0.000000f,0.002485f,-0.000000f,0.000605f,-0.004074f,-0.000626f,0.001333f,0.004395f,0.000187f,0.000571f,-0.000690f,-0.007065f,0.004154f,-0.006271f,-0.007198f,0.000444f,-0.000724f,0.000912f,-0.005077f,-0.003342f,0.000000f,0.000000f,0.000120f,-0.000000f,-0.000632f,-0.000000f,0.004131f,-0.003885f,0.000000f,-0.000242f,-0.002430f,0.002848f,0.004593f,0.005024f,0.003330f,0.000824f,0.000359f,0.000867f,0.006386f,0.010170f,0.006634f,-0.001754f,0.000000f,0.005024f,-0.003599f,0.010994f,-0.000603f,0.002216f,0.000867f,-0.000000f,-0.000311f,0.002857f,-0.005444f,-0.005859f,-0.000000f,-0.000000f,-0.002165f,0.006493f,-0.003462f,0.000260f,-0.000579f,0.006992f,0.001646f,-0.000221f,0.001991f,0.000000f,-0.002134f,-0.000101f,-0.001184f,-0.001616f,0.002420f,-0.001042f,-0.002443f,-0.002480f,0.001227f,0.000233f,0.002438f,-0.000000f,0.004841f,-0.000607f,-0.002262f,-0.002537f,0.000555f,-0.000000f,-0.001616f,-0.011711f,-0.001372f,-0.000000f,-0.005035f,0.002516f,-0.001986f,0.003304f,-0.000198f,0.005547f,-0.003860f,-0.000000f,0.008713f,0.003159f,-0.001413f,-0.003595f,-0.000792f,0.001770f,-0.000491f,0.002806f,-0.008133f,-0.000000f,0.000369f,-0.000603f,-0.004536f,-0.000651f,-0.002800f,0.000000f,0.002245f,0.000267f,-0.004650f,-0.001405f,0.004017f,0.008400f,0.000071f,0.000000f,0.001608f,0.000000f,0.000386f,0.001779f,-0.000846f,-0.000279f,-0.002790f,-0.007221f,-0.000000f,-0.000367f,-0.001595f,-0.000000f,0.000000f,-0.000350f,0.001795f,-0.001759f,0.003418f,0.000766f,0.000350f,0.001184f,-0.000076f,0.001400f,0.003033f,0.002571f,0.001930f,0.000000f,
        0.000000f,0.003517f,-0.000149f,-0.000000f,-0.007439f,-0.000000f,-0.000232f,0.002781f,0.000051f,0.005222f,0.000000f,0.000718f,-0.007092f,0.002956f,-0.000075f,-0.002125f,-0.000205f,0.001738f,-0.001423f,0.000000f,-0.000974f,-0.000910f,0.003687f,-0.000301f,0.000000f,-0.001387f,0.005756f,-0.001748f,0.000000f,0.032867f,-0.000000f,-0.009163f,-0.000863f,-0.001337f,0.000000f,0.000000f,0.005806f,-0.004097f,-0.001080f,-0.000377f,-0.001119f,0.002737f,0.002472f,-0.007835f,0.000818f,0.000000f,0.000440f,-0.000527f,-0.001101f,0.002649f,0.000501f,-0.000649f,0.000279f,-0.001843f,0.002882f,0.002661f,0.000846f,-0.001595f,0.003735f,0.000000f,-0.001770f,-0.001080f,0.000000f,0.000273f,0.009018f,0.005066f,0.001866f,0.000939f,-0.002632f,-0.003046f,-0.002306f,0.003511f,0.000865f,-0.004272f,0.003080f,-0.000866f,-0.002445f,0.000959f,-0.002165f,-0.000932f,0.000000f,0.000000f,-0.000524f,-0.002731f,0.004158f,0.000000f,-0.000421f,-0.002796f,-0.004261f,0.000318f,-0.004673f,0.004387f,0.000000f,0.009171f,0.004211f,0.008797f,-0.008965f,-0.001348f,-0.000376f,0.002258f,0.001427f,0.001501f,-0.000240f,-0.002903f,-0.000788f,-0.004295f,0.001060f,0.007801f,-0.000381f,0.000000f,0.003323f,-0.011841f,0.000102f,0.004196f,-0.000203f,-0.001849f,0.003254f,-0.000000f,-0.007454f,0.000364f,-0.000651f,0.000000f,0.000712f,-0.002142f,-0.002129f,-0.005894f,-0.001671f,0.003511f,-0.002142f,-0.003891f,0.000869f,0.004181f,-0.000000f,0.000461f,0.001491f,0.005524f,-0.002346f,0.000423f,-0.004326f,-0.000002f,0.000642f,-0.006454f,0.006027f,0.004227f,-0.000000f,0.000000f,-0.000014f,0.002373f,0.004169f,-0.000001f,-0.000000f,0.007965f,-0.000613f,0.001642f,0.000876f,-0.005043f,-0.000206f,0.001366f,0.000679f,0.000000f,0.000104f,0.001911f,0.000000f,-0.001670f,-0.006477f,0.000178f,0.001567f,-0.004150f,0.000000f,-0.001507f,-0.000151f,0.000189f,-0.001826f,-0.000098f,0.000683f,-0.000058f,0.002394f,-0.000000f,0.000681f,0.000882f,0.000484f,-0.004444f,-0.001941f,-0.027908f,-0.000604f,0.001727f,0.001300f,0.003138f,0.006886f,0.000489f,-0.002638f,-0.002691f,-0.001884f,0.001085f,-0.002481f,-0.000555f,-0.000308f,0.001774f,0.003006f,-0.009705f,
        -0.001306f,-0.002777f,-0.002832f,0.000826f,-0.000614f,-0.000000f,0.000000f,0.000052f,0.001007f,0.000000f,-0.000000f,-0.002808f,-0.000000f,-0.000085f,0.000540f,0.000056f,-0.007965f,0.007484f,0.002142f,0.001329f,0.000058f,0.000581f,-0.001603f,-0.001961f,-0.000324f,0.004436f,-0.007309f,0.001873f,0.000000f,0.000888f,0.000108f,-0.000000f,0.000113f,0.010986f,-0.002071f,0.004585f,0.000000f,0.008965f,-0.002453f,-0.000175f,0.001529f,0.000034f,-0.011177f,0.002565f,-0.001655f,0.001731f,0.000324f,0.000000f,-0.000908f,0.000755f,0.005421f,0.000000f,-0.000000f,0.000214f,0.000674f,-0.000000f,0.000639f,-0.001740f,-0.003071f,-0.004845f,0.004215f,0.005119f,0.001682f,0.000000f,0.000350f,-0.000907f,0.001364f,0.010887f,-0.000358f,0.000271f,0.011772f,-0.001587f,0.001227f,-0.000000f,-0.001206f,0.002668f,0.000024f,0.000269f,-0.000758f,-0.001507f,0.010788f,0.000682f,0.001046f,-0.000998f,-0.001951f,-0.001521f,0.000597f,0.000498f,-0.002916f,0.003445f,-0.001858f,-0.003143f,0.002792f,0.003473f,-0.001949f,-0.002794f,0.000122f,0.006508f,0.002413f,0.002092f,0.001976f,-0.001363f,0.005886f,-0.001250f,-0.002691f,0.000000f,-0.000792f,-0.003141f,-0.000000f,0.005066f,-0.010933f,0.000799f,-0.000388f,0.001413f,0.001006f,0.000000f,0.001057f,0.003141f,-0.000968f,-0.002577f,0.000760f,0.001632f,-0.004276f,-0.000326f,0.000303f,0.002514f,-0.000277f,0.000231f,-0.005970f,-0.002039f,0.004395f,-0.000292f,-0.001748f,0.000896f,0.000452f,-0.000000f,0.007679f,-0.002481f,0.002203f,0.002289f,-0.000498f,0.000112f,-0.000000f,0.000000f,-0.004326f,0.004375f,0.000807f,0.009590f,0.017044f,-0.003548f,-0.002411f,0.000000f,0.014015f,0.000572f,0.001237f,-0.005184f,0.002127f,0.002651f,0.004086f,0.004761f,-0.006981f,-0.000000f,-0.000000f,-0.003798f,-0.001516f,0.003960f,-0.006229f,0.000825f,-0.000000f,-0.000169f,0.003872f,0.000117f,-0.006908f,0.002104f,-0.000000f,-0.000459f,-0.000000f,-0.001797f,-0.000211f,-0.002407f,0.001027f,0.000000f,-0.000000f,0.000365f,-0.000000f,-0.001656f,-0.000000f,-0.004108f,0.001235f,0.000000f,0.000000f,-0.002108f,0.005058f,0.000733f,-0.015732f,0.001426f,0.001265f,-0.011292f,0.000933f,0.003359f,
        0.000000f,-0.004101f,-0.001742f,-0.003792f,-0.000327f,-0.006142f,0.003340f,-0.001035f,0.000000f,-0.001019f,-0.005508f,-0.001251f,0.001367f,0.004154f,0.000000f,-0.010574f,-0.001616f,0.006008f,0.002449f,-0.001316f,-0.000450f,0.002855f,0.000475f,-0.000046f,-0.002466f,0.003183f,-0.002043f,0.001198f,-0.001437f,-0.002089f,-0.001716f,0.005959f,0.000903f,0.005627f,-0.002649f,-0.008690f,-0.000000f,-0.010902f,-0.000342f,-0.000100f,0.000000f,0.000000f,0.006863f,0.000000f,-0.003990f,0.000809f,0.003191f,-0.000000f,0.001832f,-0.003689f,-0.001815f,0.000967f,-0.000451f,-0.000452f,-0.003244f,-0.000413f,-0.000073f,0.010971f,0.000741f,0.000000f,-0.000396f,0.000000f,-0.000894f,-0.002249f,0.004589f,0.007729f,0.000759f,0.000000f,-0.002087f,-0.005394f,0.000759f,-0.000347f,0.000000f,0.002457f,0.001001f,-0.000339f,-0.000000f,0.001999f,0.000000f,-0.001162f,0.000698f,0.000000f,-0.000665f,-0.000000f,-0.005951f,-0.000153f,-0.003191f,-0.000240f,-0.000048f,0.002258f,-0.000298f,-0.008018f,-0.007462f,0.000000f,-0.000005f,0.000594f,0.000052f,0.000739f,0.000272f,0.001690f,0.003521f,0.002384f,0.008156f,-0.000522f,-0.003077f,-0.000688f,0.003174f,0.000316f,-0.000322f,0.000321f,0.000152f,-0.000000f,0.000490f,0.013893f,0.000234f,0.005100f,-0.000871f,0.001448f,-0.000465f,0.000000f,0.002764f,-0.000000f,0.003143f,-0.000059f,0.001271f,-0.004131f,-0.000257f,0.002096f,0.000488f,-0.000000f,-0.000700f,0.000904f,0.000835f,0.000073f,-0.000221f,0.000065f,0.001383f,0.005516f,0.005859f,-0.001282f,0.000393f,-0.000135f,0.005569f,0.001447f,0.006901f,0.000610f,0.000777f,0.000290f,0.007301f,-0.000455f,-0.000409f,-0.000235f,0.000000f,0.000941f,-0.000000f,-0.000000f,0.000829f,-0.000000f,-0.004711f,-0.002501f,0.000254f,0.000311f,-0.003685f,-0.000894f,0.002077f,-0.003201f,-0.002998f,0.001267f,0.000000f,0.000642f,-0.000000f,-0.000559f,0.000000f,-0.000000f,0.000499f,-0.003498f,0.000000f,-0.000000f,-0.000661f,0.002970f,0.000000f,0.001216f,-0.000000f,-0.001159f,-0.000000f,-0.000000f,0.000000f,0.000873f,-0.000000f,-0.001861f,0.000164f,0.000000f,-0.000000f,-0.005276f,-0.004463f,0.000000f,-0.000000f,-0.007000f,0.004803f,-0.002600f,
        -0.002199f,-0.002310f,-0.000170f,0.002848f,0.000978f,-0.003696f,0.005119f,0.000327f,-0.002645f,0.000000f,-0.000000f,-0.000004f,-0.000000f,0.000000f,0.000000f,0.002739f,-0.002552f,0.001048f,0.012314f,0.003441f,-0.002676f,0.000000f,-0.002472f,0.002850f,0.006351f,-0.003729f,0.002151f,0.001673f,0.001076f,0.000431f,0.000988f,0.010048f,0.000207f,0.002153f,-0.010391f,-0.044891f,-0.001345f,0.004116f,0.001348f,-0.004105f,0.000000f,0.000000f,-0.001401f,0.000648f,0.000855f,-0.005909f,-0.000681f,-0.000658f,-0.002399f,0.000367f,-0.000000f,-0.000298f,-0.008194f,-0.016708f,0.000168f,0.000979f,0.002951f,-0.000000f,-0.015900f,-0.001537f,-0.000000f,0.002312f,-0.004211f,-0.001965f,-0.005939f,0.001247f,-0.000000f,0.001691f,-0.017944f,0.000000f,0.000000f,-0.000052f,-0.000000f,0.001589f,0.001403f,-0.001426f,0.000000f,-0.003906f,0.000180f,0.000992f,-0.001114f,0.000000f,-0.005322f,0.000407f,0.000000f,0.003469f,0.011345f,0.001089f,0.002123f,0.005127f,0.006336f,-0.000771f,-0.002609f,-0.002340f,-0.000000f,0.002470f,0.000000f,0.003807f,-0.000831f,0.000000f,0.003006f,0.000000f,-0.001583f,0.000000f,0.000407f,0.000008f,0.010147f,-0.000302f,0.002609f,0.000366f,0.002193f,0.000079f,-0.001323f,-0.001638f,-0.000291f,0.007755f,-0.000000f,0.000000f,0.000000f,-0.004879f,-0.001494f,0.005608f,-0.000000f,0.008873f,0.000000f,-0.000569f,-0.000956f,-0.000000f,0.004887f,-0.000810f,0.000211f,-0.006271f,-0.003408f,-0.002258f,-0.002674f,-0.002485f,-0.003775f,-0.000000f,0.001568f,-0.000248f,-0.000669f,-0.005947f,0.000000f,0.002125f,-0.005188f,-0.001616f,-0.000000f,-0.000000f,-0.001119f,-0.000005f,0.000879f,0.002424f,-0.001227f,-0.000387f,0.000153f,0.001194f,-0.001285f,-0.000966f,-0.010269f,-0.002966f,-0.000017f,-0.001647f,0.000000f,0.001369f,0.003956f,0.010391f,-0.000251f,0.000000f,0.001279f,0.010056f,-0.001997f,-0.000450f,-0.009232f,0.006554f,-0.001548f,-0.000000f,-0.000691f,-0.001141f,-0.007275f,-0.000000f,0.000000f,-0.001698f,0.004276f,0.006748f,0.000219f,-0.000364f,-0.001547f,0.000271f,-0.000353f,-0.001340f,0.000000f,0.013840f,0.003563f,0.000721f,-0.004902f,0.000352f,-0.000000f,0.003798f,0.001209f,0.004028f,
        -0.000000f,-0.003721f,-0.000181f,0.003305f,0.000000f,0.028900f,-0.000000f,-0.004257f,-0.001537f,-0.000000f,-0.001707f,0.005226f,0.000105f,-0.003296f,0.000509f,0.001882f,-0.000000f,0.003597f,-0.000000f,0.004551f,0.002039f,-0.001839f,0.000103f,-0.000896f,-0.001896f,-0.006500f,-0.004375f,-0.000000f,-0.000595f,0.000921f,-0.000535f,-0.002939f,0.000835f,-0.005646f,0.003286f,-0.003918f,-0.001533f,0.004036f,0.001566f,0.000180f,0.000000f,0.004173f,-0.002708f,0.001439f,-0.000743f,0.003054f,-0.001570f,0.001688f,0.000281f,0.000476f,0.002525f,-0.001736f,-0.002747f,0.000000f,-0.000866f,0.006844f,-0.000000f,0.009293f,-0.000513f,0.002050f,0.001051f,-0.004940f,-0.002304f,0.000459f,-0.000000f,-0.002378f,-0.000000f,-0.007233f,0.000058f,0.000470f,0.003180f,-0.000517f,0.001675f,0.000317f,0.001093f,0.001778f,-0.001450f,-0.000176f,-0.001677f,0.000196f,0.001178f,-0.004978f,-0.000000f,0.003851f,-0.002270f,-0.000000f,-0.000064f,0.005268f,-0.001450f,-0.001089f,-0.004951f,0.000000f,0.000000f,-0.002512f,0.001136f,0.001955f,0.002569f,-0.000937f,-0.004147f,0.000338f,-0.000000f,-0.000000f,-0.001566f,0.000663f,-0.008377f,-0.000000f,-0.001104f,-0.000346f,-0.000468f,-0.000515f,0.001409f,0.002073f,0.004295f,-0.000069f,0.000995f,-0.000000f,0.000162f,0.000556f,-0.000860f,0.000056f,-0.000000f,0.000820f,0.002708f,0.004856f,-0.000000f,-0.000049f,0.001331f,0.000000f,0.000339f,0.000620f,-0.005222f,0.000000f,-0.000383f,0.002085f,0.007515f,-0.003658f,0.001838f,0.001201f,-0.003107f,-0.000000f,-0.004562f,-0.000000f,-0.001128f,0.000000f,0.002682f,0.000566f,-0.001155f,0.000000f,0.005032f,0.001276f,0.002918f,0.000344f,0.010567f,0.002224f,0.001737f,0.000944f,0.000000f,0.001965f,0.000641f,0.010590f,-0.004192f,-0.000000f,0.003672f,0.002743f,0.001601f,-0.002069f,-0.002014f,0.000472f,-0.012589f,0.008942f,-0.001744f,0.004910f,-0.000410f,0.000000f,-0.001855f,-0.000000f,-0.250732f,0.000419f,-0.003651f,0.003286f,0.003090f,0.001237f,-0.001026f,-0.000052f,0.006016f,0.000522f,0.002247f,0.011063f,-0.000624f,0.000507f,-0.000383f,-0.001471f,0.004356f,-0.000067f,-0.000620f,0.000000f,0.000000f,-0.000000f,-0.006557f,-0.000000f,
        -0.001631f,-0.001090f,-0.000680f,0.000505f,-0.001513f,-0.002701f,0.002169f,-0.000000f,-0.003618f,-0.008003f,-0.009415f,0.006050f,0.000775f,0.000000f,-0.000000f,0.002344f,-0.000391f,0.001501f,-0.004673f,-0.000031f,0.000202f,0.002842f,0.004868f,-0.000000f,0.000000f,0.001098f,-0.000290f,0.006386f,-0.000559f,0.002193f,0.000000f,0.000000f,-0.000018f,-0.001679f,-0.000412f,0.002031f,-0.001445f,-0.000000f,0.000681f,-0.003672f,-0.002247f,-0.000767f,0.000000f,0.003349f,-0.000000f,0.000534f,0.003986f,0.002663f,-0.001384f,0.000000f,0.001544f,-0.000161f,0.005573f,-0.001341f,-0.000360f,0.001823f,-0.001339f,-0.007454f,-0.000000f,-0.007019f,-0.002274f,-0.002642f,0.000701f,-0.001747f,-0.004288f,-0.000000f,-0.000000f,0.000194f,-0.015732f,-0.002972f,-0.000000f,-0.004166f,-0.008820f,-0.003023f,-0.004044f,-0.000000f,0.000136f,0.002705f,0.005234f,0.001009f,-0.005131f,-0.002504f,-0.001277f,-0.000290f,0.000026f,0.000601f,0.009254f,0.000947f,-0.004040f,-0.000647f,-0.004566f,0.004173f,0.000410f,0.003674f,0.001024f,0.002882f,0.014595f,-0.001019f,0.001274f,-0.001264f,0.000011f,-0.000000f,-0.001582f,-0.001332f,-0.002161f,0.000000f,-0.002029f,0.012238f,-0.000501f,0.001939f,0.000000f,-0.000000f,-0.003630f,0.000886f,-0.000000f,0.002934f,-0.000669f,0.009377f,0.005703f,0.000164f,0.002357f,0.001927f,-0.000000f,-0.000000f,-0.002462f,0.000422f,-0.005993f,-0.000741f,-0.000000f,-0.002281f,-0.001225f,-0.013557f,-0.000059f,-0.000000f,-0.000526f,0.002146f,-0.001920f,-0.000000f,0.000000f,0.000645f,0.000000f,0.001408f,-0.001621f,-0.004692f,0.000199f,-0.007019f,0.000000f,0.013336f,0.012589f,-0.008591f,0.007538f,0.000000f,0.001545f,-0.002052f,0.005287f,0.000000f,0.000078f,-0.001370f,-0.002392f,0.001011f,0.000967f,-0.009384f,0.000000f,0.000000f,0.000000f,0.002041f,-0.006710f,0.000000f,-0.001709f,-0.003178f,0.003628f,0.000013f,0.000000f,-0.001574f,-0.000932f,0.000848f,-0.000507f,0.000144f,-0.000853f,0.003851f,0.000763f,0.005802f,0.000056f,-0.000672f,-0.000829f,0.003971f,0.001208f,0.001291f,-0.002132f,-0.001003f,0.000000f,0.000000f,0.000000f,0.001563f,-0.004078f,0.000273f,-0.001102f,0.002800f,-0.001896f,0.000000f,
        0.000000f,-0.000000f,0.000000f,-0.000334f,-0.000595f,-0.000636f,0.003918f,-0.000000f,-0.000156f,0.001068f,-0.000363f,0.002876f,0.004444f,0.005974f,0.000620f,0.002552f,-0.000000f,0.007160f,0.015182f,-0.000000f,-0.003561f,-0.000823f,-0.000000f,-0.005558f,-0.004005f,0.003933f,-0.000872f,0.000731f,-0.003111f,-0.005383f,-0.002377f,0.000378f,-0.000545f,0.000000f,0.000000f,0.000000f,0.004871f,-0.000764f,-0.002316f,-0.001140f,-0.000692f,0.003639f,0.004223f,0.000000f,0.003174f,0.001724f,-0.000000f,-0.001472f,0.008888f,0.018555f,0.000634f,0.000000f,-0.002811f,-0.002649f,0.001300f,-0.000331f,0.000000f,0.004860f,0.000000f,0.015976f,-0.000366f,-0.003469f,-0.000228f,0.010971f,-0.005131f,-0.000025f,0.002516f,-0.001175f,0.000196f,0.002108f,0.000000f,-0.000387f,0.000000f,0.004295f,0.002968f,-0.001014f,-0.007439f,-0.005741f,0.007092f,-0.001562f,-0.000000f,-0.000349f,0.001682f,0.000000f,0.000000f,0.000000f,-0.001198f,-0.001109f,0.000000f,-0.005119f,0.013870f,-0.000453f,0.000000f,-0.005959f,-0.000793f,-0.003010f,0.000753f,0.001857f,0.001485f,-0.001768f,-0.011528f,0.002268f,0.001029f,0.000470f,0.001627f,0.000407f,0.007771f,-0.003038f,0.000000f,0.000465f,0.000953f,-0.000000f,-0.000780f,0.000775f,0.003477f,-0.002600f,-0.001458f,-0.000729f,0.000747f,-0.000000f,0.003359f,0.001102f,0.006615f,-0.002468f,0.000019f,-0.000988f,0.000015f,-0.004929f,0.000322f,-0.002363f,-0.000302f,-0.009811f,-0.001620f,-0.001840f,-0.002096f,0.000299f,0.006111f,-0.000000f,-0.002054f,0.001921f,-0.003414f,0.000000f,0.000339f,0.002123f,-0.000185f,-0.000000f,-0.003017f,-0.000000f,0.002672f,0.001919f,-0.007935f,0.000386f,0.000000f,-0.000984f,0.001064f,0.000000f,-0.003685f,0.000370f,-0.002747f,0.000000f,0.000393f,-0.000000f,0.015778f,0.001512f,-0.004463f,0.002024f,-0.001026f,0.010826f,0.000243f,-0.000000f,0.000000f,-0.000024f,-0.005383f,-0.000790f,0.000000f,0.002752f,-0.004913f,0.002708f,-0.000487f,0.000000f,-0.006699f,-0.001507f,-0.000000f,-0.009171f,-0.000523f,-0.002338f,-0.007153f,-0.002159f,-0.000958f,0.000865f,-0.001476f,-0.000692f,0.001843f,0.001131f,-0.006771f,0.000155f,-0.002653f,-0.004803f,-0.000000f,0.013832f,
        0.005741f,0.001396f,0.000743f,0.000549f,-0.002176f,0.002092f,-0.007660f,0.003536f,-0.000081f,-0.000131f,0.000429f,-0.000847f,-0.001478f,0.004425f,-0.003683f,-0.000023f,-0.007881f,0.001224f,0.000931f,-0.000578f,-0.001844f,0.002655f,-0.001740f,0.002016f,-0.001404f,-0.000597f,0.002214f,-0.000118f,-0.000514f,-0.000733f,0.000000f,-0.005951f,-0.002325f,0.004036f,-0.003342f,-0.004311f,0.003841f,-0.001114f,-0.000000f,-0.000000f,-0.002258f,0.000000f,0.001175f,0.000568f,0.000014f,0.002943f,-0.003098f,0.000806f,0.003174f,0.001714f,-0.003073f,0.006050f,-0.000598f,-0.000000f,0.001219f,-0.000990f,-0.000597f,0.000000f,0.000928f,0.002001f,-0.011581f,-0.004890f,0.005585f,-0.000711f,-0.000000f,-0.001576f,0.000000f,0.003201f,0.000039f,0.002516f,-0.000225f,0.000996f,0.000000f,-0.001368f,-0.002335f,0.004642f,0.003567f,-0.001305f,-0.001282f,0.000000f,-0.002930f,0.000515f,0.002636f,0.002230f,-0.004951f,0.000750f,-0.001565f,-0.002169f,0.003246f,0.000642f,-0.000000f,0.002453f,0.003101f,-0.007099f,0.000000f,-0.004005f,-0.002794f,0.002773f,-0.001222f,0.001885f,0.005886f,-0.004341f,-0.002731f,-0.000523f,-0.002108f,-0.000386f,-0.000391f,-0.001894f,-0.000996f,-0.000000f,0.000689f,-0.006886f,-0.000090f,0.002289f,-0.000687f,0.000460f,0.000000f,0.000000f,0.000160f,-0.000000f,-0.000648f,-0.000440f,-0.001315f,0.000195f,-0.002928f,-0.000588f,0.000713f,-0.000074f,-0.003597f,-0.000578f,-0.003603f,-0.003164f,0.005943f,-0.012711f,0.001905f,-0.000000f,-0.001395f,0.000000f,0.003851f,0.006260f,-0.000000f,0.000000f,-0.000960f,0.001385f,-0.000621f,0.001652f,0.005173f,-0.005741f,-0.006092f,0.000235f,-0.000496f,-0.003096f,0.002344f,-0.002205f,-0.000000f,-0.000028f,-0.000503f,-0.000836f,-0.002626f,0.001423f,0.000245f,-0.001968f,0.001949f,-0.000645f,0.000871f,-0.002796f,-0.004059f,0.000530f,-0.007095f,-0.005348f,0.002798f,0.000000f,0.000626f,0.000000f,-0.000390f,0.000000f,-0.004078f,-0.004238f,0.001842f,-0.001972f,-0.000813f,0.000000f,0.001253f,-0.000693f,-0.000000f,-0.008286f,0.005405f,-0.002439f,-0.001149f,-0.008118f,-0.001309f,-0.000000f,0.000000f,-0.001446f,-0.000544f,-0.001764f,0.003193f,0.000551f,0.004597f,0.000665f,
        -0.000812f,-0.000000f,0.001108f,0.002644f,0.000000f,0.000045f,-0.003094f,-0.000572f,0.000000f,-0.000525f,-0.001972f,-0.000000f,-0.002052f,0.000000f,-0.002460f,-0.000376f,-0.005383f,0.000000f,0.000000f,0.005482f,0.002504f,0.005032f,0.000361f,0.000000f,0.001581f,-0.000000f,-0.000509f,-0.001416f,-0.000000f,-0.000804f,-0.000035f,0.003508f,0.000191f,0.000000f,-0.000000f,0.000000f,-0.000000f,0.002062f,-0.000000f,0.002913f,0.013206f,0.000000f,0.001262f,0.003286f,0.001774f,0.002413f,-0.002598f,0.000419f,-0.001413f,0.003511f,-0.005192f,0.000752f,0.000646f,-0.000000f,-0.005882f,-0.004780f,-0.006283f,-0.001775f,0.001621f,-0.000000f,0.004761f,0.001263f,-0.002575f,0.000437f,-0.000497f,-0.000000f,0.006279f,-0.000073f,0.016785f,0.004478f,-0.002111f,-0.005440f,0.002272f,-0.002085f,-0.003300f,0.004009f,0.001145f,-0.008209f,0.000213f,0.000000f,-0.005177f,-0.000509f,0.021118f,-0.003532f,-0.001545f,-0.001923f,-0.004532f,-0.006241f,0.001392f,-0.001049f,-0.000772f,0.000000f,-0.006882f,-0.002439f,-0.001935f,-0.004799f,0.000000f,0.001436f,0.002224f,-0.012802f,-0.003487f,-0.000000f,-0.002850f,-0.000049f,-0.001918f,0.000827f,0.000048f,-0.001145f,-0.003067f,-0.004616f,-0.004059f,-0.000000f,-0.000000f,-0.001828f,0.002058f,-0.010605f,-0.000000f,-0.003897f,0.001403f,-0.000059f,0.002235f,-0.000000f,-0.000194f,-0.001147f,0.008644f,-0.003407f,0.007050f,-0.001111f,-0.000877f,-0.003149f,-0.002340f,-0.000000f,-0.000313f,0.000331f,0.010414f,-0.000000f,0.003237f,-0.005295f,-0.000000f,-0.001567f,-0.001223f,0.000183f,0.002043f,-0.000000f,-0.007034f,0.000824f,-0.002275f,-0.005131f,0.005959f,-0.001011f,0.003105f,-0.000000f,-0.000777f,-0.000947f,0.001571f,-0.001191f,0.001059f,0.003065f,0.003752f,-0.001477f,-0.000520f,0.000355f,0.000000f,-0.001301f,-0.000911f,0.002831f,0.003759f,-0.000000f,0.001750f,-0.001597f,0.003555f,-0.000000f,0.007545f,0.001263f,0.000372f,0.000863f,-0.001229f,0.001526f,0.000000f,-0.000068f,0.001463f,0.003473f,0.000768f,-0.001884f,-0.002073f,0.000000f,-0.008362f,-0.006153f,0.002796f,-0.000213f,-0.000000f,-0.000000f,0.007389f,0.002419f,0.000008f,0.000245f,-0.004673f,0.003456f,-0.000350f,-0.004196f,
        0.001119f,0.005066f,-0.000889f,-0.005718f,0.007786f,-0.000598f,-0.003666f,0.000000f,0.000000f,0.008896f,0.000000f,0.000000f,-0.007965f,0.000015f,-0.000278f,0.000046f,-0.001700f,0.000361f,0.004173f,-0.001616f,-0.002466f,-0.004520f,0.000638f,0.000794f,-0.000000f,0.001016f,0.000668f,-0.004093f,-0.000550f,0.005035f,-0.001802f,0.001776f,0.000000f,-0.002571f,0.001877f,-0.001499f,0.000000f,0.009727f,0.000000f,-0.000286f,-0.000000f,-0.002163f,0.000000f,-0.007015f,0.006771f,0.001192f,-0.000000f,-0.000000f,0.000000f,-0.001135f,0.000401f,0.000845f,0.000834f,0.001442f,-0.001350f,0.000986f,-0.001825f,-0.006657f,-0.002481f,-0.000717f,0.000271f,0.002224f,-0.001976f,0.001042f,0.000702f,0.000732f,-0.000000f,-0.000664f,-0.001338f,0.000352f,-0.000765f,-0.000905f,0.004452f,0.176636f,0.000258f,-0.000320f,-0.005108f,-0.000662f,-0.001999f,0.000268f,0.002628f,-0.000038f,-0.003304f,0.001624f,0.007721f,0.003607f,-0.001178f,0.006165f,0.005074f,-0.000029f,0.000102f,-0.000195f,-0.000000f,-0.001736f,-0.002691f,0.000151f,-0.003347f,0.000000f,0.000628f,0.001555f,0.000098f,-0.002346f,0.001077f,0.001598f,-0.000000f,0.001566f,-0.000823f,-0.001506f,0.000328f,-0.001145f,0.000000f,0.000323f,-0.000532f,-0.012489f,-0.000421f,-0.000217f,-0.000000f,0.000465f,-0.004143f,-0.003048f,-0.000000f,-0.002529f,0.000515f,-0.000376f,-0.005527f,-0.001405f,-0.000653f,0.002111f,-0.001348f,-0.004063f,0.000635f,-0.000873f,-0.000000f,0.000000f,0.001188f,-0.002604f,-0.000000f,0.003244f,-0.004520f,-0.001580f,0.001432f,0.002693f,-0.000293f,0.009361f,0.000306f,0.000017f,0.000278f,-0.001963f,-0.002268f,-0.000671f,0.002457f,-0.001915f,-0.000097f,-0.006439f,0.003952f,0.000732f,-0.002777f,0.000000f,-0.003447f,0.001463f,0.004375f,0.000297f,0.000000f,0.000587f,-0.000331f,-0.000002f,0.005962f,-0.000033f,-0.004192f,-0.000944f,-0.000035f,-0.004807f,-0.001548f,-0.005054f,-0.002039f,0.003862f,-0.001062f,-0.000000f,0.006638f,0.000785f,-0.000000f,-0.002003f,-0.000000f,0.000000f,-0.000085f,-0.001541f,-0.000248f,-0.001125f,-0.000246f,0.001755f,-0.000000f,-0.004787f,-0.000686f,-0.000300f,-0.004700f,-0.002136f,-0.002045f,0.000353f,-0.007545f,0.000904f,
        -0.003365f,-0.000300f,0.000000f,0.001631f,0.003078f,0.000000f,0.002773f,-0.006443f,-0.002737f,0.001740f,-0.000506f,-0.000300f,-0.001005f,0.002911f,-0.000955f,0.000195f,-0.001041f,0.000000f,0.000217f,0.003054f,0.004414f,-0.003069f,-0.000725f,-0.000229f,-0.000836f,-0.000461f,-0.004265f,0.001151f,-0.000609f,0.002258f,0.005375f,-0.001692f,-0.003883f,-0.008118f,0.001775f,-0.001273f,0.006184f,0.000648f,-0.001955f,-0.000543f,0.003038f,0.002357f,-0.001773f,0.002098f,-0.003603f,0.000755f,-0.003761f,-0.000486f,-0.000000f,-0.001993f,-0.003717f,0.006344f,-0.001209f,-0.000454f,-0.000000f,0.002844f,-0.000105f,-0.003922f,-0.000000f,-0.000421f,-0.001129f,0.001253f,0.000000f,0.000000f,0.000000f,-0.000757f,-0.004917f,-0.002876f,-0.002470f,0.008820f,-0.000000f,-0.004646f,0.001488f,-0.000313f,-0.008667f,0.000383f,-0.002277f,-0.000177f,-0.000000f,-0.002077f,0.001757f,0.002655f,-0.001109f,-0.009514f,-0.002764f,-0.000135f,0.000298f,-0.001234f,-0.000220f,-0.001849f,0.001599f,-0.000000f,0.008530f,-0.008026f,0.001058f,-0.000066f,-0.000461f,-0.018021f,0.000617f,-0.000915f,-0.000000f,-0.001803f,0.001104f,0.004898f,-0.002689f,-0.001294f,0.001893f,-0.000310f,0.000000f,-0.008057f,-0.006359f,-0.011726f,0.003180f,0.007965f,0.001490f,-0.008530f,-0.004398f,-0.004498f,-0.001693f,-0.000417f,-0.007767f,-0.010826f,-0.008049f,0.002541f,0.000000f,-0.001716f,-0.001199f,0.016037f,-0.000000f,-0.000000f,-0.000173f,0.001503f,-0.003189f,-0.002941f,-0.001205f,-0.000000f,-0.000185f,-0.000785f,0.000353f,-0.002840f,-0.000404f,0.000000f,-0.000000f,0.000585f,-0.011360f,-0.000257f,-0.000299f,-0.004326f,0.000000f,0.000000f,-0.004711f,0.000000f,-0.000000f,-0.001680f,0.001540f,-0.003178f,-0.000520f,-0.000491f,-0.000706f,0.006474f,-0.003105f,-0.000000f,-0.000352f,0.000029f,-0.000000f,-0.005505f,-0.004276f,0.003471f,0.001717f,-0.001367f,-0.000978f,-0.001386f,0.000458f,0.001337f,0.001760f,-0.001705f,0.000787f,-0.004765f,-0.002052f,0.001991f,-0.000649f,-0.004414f,-0.001446f,0.000273f,0.000743f,0.000433f,-0.001042f,-0.000000f,0.002430f,-0.005367f,-0.000000f,-0.000000f,-0.000931f,-0.001582f,0.000703f,-0.001687f,0.002087f,-0.000938f,0.000995f,0.000666f,
        -0.001651f,0.001886f,0.012230f,0.005093f,0.000823f,-0.002293f,-0.000000f,0.001968f,0.003326f,-0.000960f,0.000762f,0.005993f,0.000614f,0.001086f,0.004406f,0.002937f,0.004406f,-0.004295f,0.000000f,0.000000f,0.000441f,-0.003531f,-0.000490f,0.000000f,-0.001684f,-0.000000f,0.005066f,0.003365f,0.000907f,-0.000000f,-0.001570f,0.034698f,-0.013130f,-0.000000f,-0.000000f,-0.001459f,0.001573f,-0.000000f,0.007309f,-0.001127f,0.002438f,-0.001323f,0.003616f,-0.004253f,0.002037f,0.001097f,-0.003080f,-0.005341f,-0.000390f,0.003475f,-0.003428f,-0.000902f,0.000284f,-0.000000f,-0.003241f,-0.004128f,0.000000f,0.000000f,-0.001882f,-0.000321f,-0.000000f,-0.006699f,-0.001318f,-0.002964f,0.004990f,0.004593f,0.000915f,0.001181f,-0.000296f,-0.000000f,-0.000000f,0.000000f,-0.002304f,0.000629f,-0.003889f,0.000750f,0.005775f,-0.003103f,0.008469f,-0.001307f,-0.002943f,0.008263f,-0.000844f,-0.001835f,-0.001005f,0.001797f,0.000480f,0.000159f,-0.005157f,0.001104f,-0.006382f,-0.001316f,-0.001466f,-0.000000f,0.002411f,-0.000045f,-0.007339f,0.003527f,0.000466f,0.001370f,0.000470f,0.003843f,0.000419f,0.004101f,-0.000411f,-0.000495f,-0.000813f,0.000000f,0.003002f,0.005135f,0.000284f,-0.003431f,-0.002079f,0.000734f,-0.007324f,0.002430f,0.000245f,-0.007198f,-0.000539f,-0.000389f,0.005783f,0.001168f,0.000672f,-0.000409f,0.001311f,0.000470f,-0.001781f,0.002794f,0.001027f,-0.002811f,0.002409f,-0.001015f,0.000254f,-0.006405f,-0.001383f,0.010666f,0.000000f,0.006794f,-0.000239f,-0.003181f,0.001031f,0.000837f,-0.001509f,-0.001087f,0.000095f,0.000000f,0.000762f,-0.002489f,-0.000901f,0.003607f,0.001504f,-0.001546f,0.009285f,-0.001062f,0.001712f,-0.003714f,-0.000530f,-0.001090f,0.003004f,-0.001816f,-0.000961f,-0.000026f,-0.001708f,0.002848f,0.000000f,0.006779f,0.003202f,-0.000476f,-0.008553f,-0.001061f,0.009712f,0.000191f,-0.004871f,-0.001133f,-0.000879f,-0.002373f,0.000717f,-0.001172f,-0.004295f,0.005451f,-0.000929f,0.000000f,0.000000f,-0.001084f,-0.002493f,-0.002794f,0.000770f,-0.000000f,0.002703f,0.003283f,0.006565f,0.001246f,-0.000209f,-0.000654f,-0.012154f,-0.004833f,-0.001641f,0.001978f,0.005157f,0.002115f,
        0.000638f,0.003796f,-0.000175f,-0.002148f,0.000000f,0.001315f,-0.006210f,-0.005264f,-0.000000f,-0.013405f,-0.001415f,0.012886f,0.000322f,-0.000055f,0.003237f,0.001424f,-0.000000f,0.000712f,0.002092f,-0.000000f,0.001451f,-0.000374f,0.000379f,0.000499f,0.000621f,0.000910f,0.000000f,0.001941f,-0.005108f,0.000651f,-0.001513f,0.003891f,0.008011f,0.001190f,0.003061f,0.000066f,0.001847f,-0.001459f,-0.006603f,0.001725f,-0.005436f,-0.001307f,0.001047f,-0.005997f,0.010803f,-0.002899f,0.000583f,0.000000f,0.003849f,0.006138f,0.001376f,0.008667f,0.016708f,-0.002211f,0.005802f,-0.000000f,-0.000292f,-0.000436f,0.002527f,-0.003391f,0.005054f,0.003405f,-0.000949f,-0.005844f,-0.001338f,0.000665f,0.001210f,0.000784f,0.000073f,0.002131f,0.001261f,-0.000605f,-0.000037f,-0.000619f,-0.000436f,-0.002872f,-0.004459f,0.003304f,0.000234f,0.002745f,0.001095f,0.000274f,-0.000892f,0.004410f,0.000000f,-0.000031f,-0.001940f,-0.002077f,-0.000304f,-0.003782f,-0.004520f,-0.001959f,-0.000000f,-0.000000f,-0.000856f,-0.000355f,0.001911f,-0.000000f,-0.004120f,0.000949f,0.001538f,0.000000f,0.000609f,0.000966f,-0.019333f,-0.000000f,0.000508f,0.001360f,0.001541f,-0.000000f,-0.001688f,-0.000878f,-0.001966f,-0.000000f,0.002260f,0.000000f,-0.000821f,-0.000248f,0.000471f,0.001927f,-0.000407f,0.006874f,0.000576f,0.000233f,0.002489f,0.005043f,-0.000885f,-0.001384f,0.000000f,-0.000978f,-0.000481f,-0.004253f,-0.001936f,0.003021f,-0.001223f,-0.001593f,-0.014420f,-0.004673f,0.000662f,-0.008522f,-0.001882f,0.005581f,-0.001475f,-0.007740f,-0.000435f,-0.001585f,0.003254f,0.004463f,0.002222f,0.001383f,0.001351f,-0.001287f,0.001778f,-0.006531f,-0.000538f,0.000009f,0.000684f,0.002459f,0.008659f,0.002220f,0.001991f,-0.000015f,0.003830f,-0.001819f,0.005718f,-0.000000f,-0.002918f,0.001624f,-0.000511f,0.000376f,-0.008118f,0.004234f,0.000448f,0.002567f,-0.002182f,-0.003687f,0.000480f,-0.001575f,0.000000f,0.000000f,-0.000000f,0.000481f,-0.001647f,-0.000069f,-0.000966f,0.000039f,0.000065f,-0.000000f,0.017548f,0.004139f,0.003836f,-0.001345f,-0.008995f,0.000000f,0.001316f,-0.002939f,0.000830f,0.000000f,-0.002222f,0.000303f,
        -0.001267f,-0.005428f,-0.011116f,-0.002644f,-0.001657f,-0.000000f,-0.000944f,0.000775f,-0.001052f,-0.001159f,-0.003790f,-0.003527f,0.005642f,-0.004776f,0.000000f,-0.000000f,0.011520f,-0.001233f,0.001612f,-0.000644f,0.000000f,-0.000313f,0.002279f,0.000111f,0.000000f,-0.000163f,0.000000f,-0.001516f,0.000839f,-0.000017f,0.012924f,0.000000f,0.000273f,0.004578f,-0.004719f,-0.001421f,-0.000639f,-0.001870f,-0.000950f,-0.000000f,-0.000562f,0.001050f,0.000157f,0.000345f,-0.011650f,-0.000000f,-0.004925f,-0.001982f,-0.001364f,-0.001305f,0.000249f,-0.001145f,-0.002026f,-0.003607f,-0.000179f,-0.001384f,0.001198f,0.009331f,0.000145f,-0.004879f,0.002115f,0.002918f,-0.003349f,0.002134f,-0.000000f,-0.007133f,0.002054f,-0.007774f,-0.000493f,-0.000000f,0.012932f,0.000000f,0.000439f,0.000306f,0.000000f,-0.003666f,0.006100f,-0.000149f,-0.000000f,-0.000399f,0.005966f,-0.002645f,0.000982f,0.001741f,0.000430f,-0.000099f,0.001511f,0.000098f,-0.000000f,-0.000202f,0.002132f,0.000612f,-0.000000f,-0.001148f,-0.000000f,0.001491f,0.001622f,-0.003777f,-0.001836f,-0.001409f,-0.000434f,-0.003523f,0.001263f,0.000296f,0.000396f,0.000579f,0.000654f,-0.002956f,0.000000f,-0.004341f,0.001666f,-0.001105f,-0.004471f,-0.000000f,-0.005421f,0.000993f,0.004604f,0.000055f,0.000968f,0.003773f,-0.000000f,0.000527f,-0.005493f,-0.019897f,0.011383f,-0.001374f,0.006020f,0.000121f,0.005508f,-0.005676f,0.004566f,-0.000000f,0.000000f,-0.000757f,-0.000651f,0.000169f,0.000707f,-0.001287f,-0.001058f,0.004963f,-0.001840f,0.016510f,0.002048f,0.002424f,-0.002192f,-0.001249f,0.003004f,-0.001163f,-0.000986f,-0.000695f,0.000656f,-0.001839f,-0.004574f,-0.002878f,-0.001154f,-0.002558f,0.002048f,-0.000000f,-0.001217f,0.002302f,-0.001581f,0.000000f,0.000000f,0.000899f,-0.000044f,-0.001070f,0.001242f,-0.001106f,0.001692f,-0.013115f,0.002258f,0.000000f,-0.016022f,0.000012f,0.000630f,0.005962f,0.000000f,0.001790f,-0.000504f,0.000800f,0.000000f,-0.000424f,0.003323f,-0.006752f,-0.000000f,-0.000000f,-0.000000f,-0.001966f,-0.000000f,0.002251f,-0.011971f,0.006611f,-0.001493f,-0.002928f,-0.001547f,-0.005852f,-0.000117f,-0.000352f,0.000824f,-0.000504f,
        -0.000000f,0.001691f,-0.000637f,-0.000676f,-0.002239f,0.000000f,-0.000000f,-0.002010f,0.000688f,0.000305f,0.006523f,-0.000228f,-0.003325f,-0.002327f,0.011612f,0.006184f,0.002647f,0.000000f,0.001698f,-0.000067f,-0.000000f,0.000000f,0.002821f,-0.001288f,0.001080f,-0.002485f,-0.004559f,-0.001229f,-0.001000f,0.003839f,0.000000f,0.001771f,-0.001322f,-0.001863f,-0.000000f,0.000501f,0.002474f,-0.002680f,-0.000000f,0.000000f,0.000210f,-0.011345f,0.000635f,0.002722f,-0.002590f,-0.006161f,-0.006241f,0.000040f,0.001143f,-0.001770f,-0.002094f,0.002878f,-0.007706f,-0.000377f,-0.006573f,-0.000450f,0.003643f,-0.001603f,0.002197f,-0.002497f,-0.002081f,0.000000f,0.004074f,0.008423f,-0.000131f,-0.001729f,-0.001185f,0.009964f,-0.001357f,0.000938f,-0.002352f,0.001661f,0.001877f,-0.003885f,0.001533f,-0.002018f,0.000424f,0.003307f,-0.000000f,0.000367f,0.000681f,0.001023f,0.002392f,-0.000000f,0.000613f,0.000000f,0.001705f,-0.000000f,-0.001729f,-0.001285f,0.001472f,0.000232f,-0.000005f,-0.001241f,0.004997f,-0.000494f,-0.000000f,0.003439f,-0.000000f,0.000040f,-0.000000f,-0.012321f,-0.000645f,0.001026f,0.001617f,0.000389f,-0.001898f,0.000564f,0.000769f,-0.004318f,-0.002283f,0.000678f,-0.000743f,0.000984f,-0.000267f,-0.005875f,0.001909f,-0.001328f,0.000000f,-0.005070f,-0.000052f,-0.000104f,-0.010857f,-0.000544f,0.000000f,-0.000652f,-0.000230f,-0.000252f,0.073730f,0.000264f,-0.001122f,-0.009888f,-0.013672f,0.002457f,-0.001643f,-0.007130f,0.001291f,-0.001290f,0.000233f,0.000000f,-0.000730f,-0.003159f,0.004578f,-0.000419f,-0.001424f,0.000125f,0.001153f,0.000000f,0.002176f,-0.008530f,0.000944f,0.002808f,0.000366f,0.001122f,-0.000206f,-0.001554f,-0.000698f,0.000000f,0.000000f,-0.002386f,-0.000000f,0.000000f,-0.001880f,0.002001f,-0.010201f,0.002710f,0.000263f,-0.002424f,-0.003315f,-0.000560f,0.001745f,0.000597f,-0.015976f,0.000000f,-0.000383f,0.000571f,0.001087f,0.004631f,-0.001102f,0.000000f,0.000891f,-0.034027f,-0.000489f,0.000494f,-0.003626f,-0.003256f,0.001945f,0.012680f,0.000007f,0.000192f,0.002333f,0.000434f,0.000414f,-0.001278f,0.000528f,0.000869f,-0.000697f,-0.004753f,0.001131f,-0.000570f,
        -0.001388f,-0.001217f,0.000554f,-0.013542f,0.000504f,0.000391f,-0.001645f,-0.000003f,-0.000000f,-0.002741f,0.002495f,0.000962f,0.002192f,-0.002453f,-0.002174f,-0.007172f,0.002514f,0.000934f,-0.000005f,-0.000381f,0.000000f,0.000211f,-0.001723f,-0.000116f,-0.000124f,0.000000f,-0.004299f,0.000000f,0.005356f,0.001522f,0.000700f,0.001674f,-0.000000f,0.000220f,-0.000600f,-0.000841f,-0.000000f,0.000000f,-0.001631f,-0.000000f,0.006931f,-0.004063f,0.000000f,0.000649f,-0.000801f,0.002144f,-0.002489f,0.000000f,-0.000000f,0.000467f,0.000000f,-0.000054f,0.001569f,0.000659f,0.000000f,0.003538f,0.003212f,-0.001372f,-0.007290f,-0.002645f,-0.000000f,0.002199f,0.002850f,0.000157f,-0.000568f,0.001445f,-0.000000f,-0.002108f,0.002911f,0.001674f,0.000000f,0.001221f,0.005657f,-0.004215f,-0.000000f,0.000000f,-0.007374f,-0.001763f,0.000104f,-0.000546f,-0.001788f,-0.000161f,-0.008987f,-0.001358f,-0.001357f,-0.001162f,-0.000000f,-0.000155f,0.002012f,-0.000789f,-0.004929f,-0.001844f,-0.002655f,0.001885f,0.000761f,-0.001243f,0.005112f,-0.002024f,0.000718f,0.003298f,0.000833f,-0.000758f,0.002234f,-0.000399f,-0.005756f,-0.001446f,0.001092f,-0.000000f,0.000000f,-0.000079f,-0.001514f,-0.000256f,0.001575f,0.001027f,-0.000902f,0.000688f,-0.002762f,-0.000000f,0.003094f,0.011536f,0.000000f,-0.000605f,-0.000708f,0.000152f,0.003597f,-0.000068f,-0.003603f,-0.001229f,0.000685f,-0.001372f,0.006897f,-0.000000f,0.000000f,-0.000882f,0.000218f,0.000178f,0.000000f,0.001760f,0.001088f,0.000057f,-0.000000f,0.007286f,-0.003569f,-0.001243f,-0.000290f,0.003319f,-0.000875f,0.002949f,0.000000f,0.002365f,-0.001652f,-0.002123f,0.000673f,-0.009872f,-0.001667f,-0.005154f,-0.002113f,-0.003256f,-0.002550f,-0.001414f,0.001623f,-0.000000f,-0.004223f,-0.001348f,0.000840f,0.000355f,-0.001463f,-0.000000f,-0.000239f,-0.001665f,-0.000069f,0.005630f,-0.000000f,-0.000000f,0.007797f,-0.003756f,0.000969f,-0.004986f,-0.001427f,0.004677f,-0.000000f,-0.005707f,0.002628f,0.001667f,0.004017f,-0.000772f,0.002939f,-0.000000f,0.001884f,0.002481f,-0.002880f,0.002489f,-0.002810f,-0.001613f,-0.000000f,-0.000091f,-0.004890f,0.001880f,0.007927f,-0.009544f,
        -0.000000f,-0.001575f,0.001639f,0.002382f,0.007874f,0.000217f,-0.001901f,0.000073f,-0.001949f,-0.002455f,-0.000980f,0.000762f,0.000000f,0.000000f,-0.000000f,0.001632f,0.000181f,-0.000000f,-0.002783f,-0.000947f,-0.027634f,0.003391f,0.006916f,-0.003698f,0.007275f,-0.000000f,0.001676f,0.003119f,-0.001254f,0.000832f,-0.000000f,0.001921f,-0.005920f,0.002939f,0.003105f,0.001679f,-0.001272f,0.011581f,0.004684f,-0.000281f,0.001319f,-0.002516f,-0.000000f,-0.003130f,0.001595f,0.000298f,-0.001170f,0.000639f,-0.000000f,0.002056f,-0.012032f,-0.003231f,0.001108f,0.002966f,0.001421f,-0.001022f,0.000973f,0.000494f,-0.000092f,-0.000295f,0.000504f,-0.000000f,-0.002365f,0.000000f,0.000754f,-0.002037f,-0.008827f,-0.001085f,-0.002296f,0.002151f,0.003132f,0.003113f,-0.004616f,0.000049f,0.001155f,0.001128f,-0.001534f,0.001728f,-0.000000f,0.000000f,0.000628f,-0.000454f,0.000000f,-0.000000f,0.000000f,-0.008087f,0.001058f,-0.002872f,-0.000000f,0.000269f,-0.005154f,0.010178f,-0.000000f,-0.006466f,-0.001053f,0.000857f,0.001371f,-0.000911f,-0.004501f,-0.001908f,0.002201f,0.000000f,0.000393f,-0.000000f,-0.003389f,0.002899f,-0.002804f,-0.001172f,-0.003180f,0.000604f,-0.000000f,0.000000f,-0.000258f,0.000313f,-0.004402f,-0.001611f,-0.000535f,-0.000000f,-0.003405f,0.004299f,0.001480f,0.000822f,0.000000f,-0.000871f,0.003551f,0.002691f,-0.000000f,-0.000353f,-0.000000f,0.002813f,0.004444f,-0.001612f,-0.000000f,-0.001348f,-0.003834f,0.006020f,-0.000657f,0.000281f,-0.004078f,0.001841f,-0.000000f,-0.010170f,0.001179f,-0.000626f,-0.004803f,0.004776f,0.003065f,0.002253f,-0.000167f,0.000452f,-0.002005f,0.000000f,0.000200f,0.000584f,-0.000725f,0.002169f,-0.001253f,-0.010811f,-0.000285f,-0.000000f,0.006229f,-0.035675f,0.006649f,-0.002491f,-0.006584f,0.000178f,0.000608f,-0.000000f,0.002571f,-0.002081f,-0.001957f,-0.000150f,-0.003025f,-0.000648f,0.000000f,-0.000391f,0.000000f,-0.007030f,-0.001482f,0.001871f,0.001046f,0.001607f,0.000762f,0.002735f,-0.006332f,-0.001101f,0.000310f,0.000660f,-0.002710f,0.004238f,-0.002192f,-0.000000f,0.000965f,0.003937f,-0.006168f,-0.000000f,-0.000000f,0.001974f,0.000000f,0.000000f,
        0.003092f,-0.011566f,0.000000f,0.000632f,-0.001017f,0.000748f,0.000982f,-0.000944f,-0.002180f,-0.004913f,0.000202f,-0.004929f,-0.000000f,-0.009811f,-0.000000f,-0.003710f,-0.003256f,-0.000000f,0.000000f,0.008446f,-0.013443f,-0.000000f,0.001332f,0.005016f,-0.012383f,-0.000404f,0.008148f,0.000000f,-0.003178f,0.000929f,-0.000113f,-0.000101f,0.004169f,0.004803f,-0.006321f,-0.004345f,0.000556f,-0.001484f,-0.004036f,-0.002125f,-0.000000f,-0.013794f,-0.000000f,-0.008797f,-0.002695f,0.003637f,-0.005619f,-0.003855f,0.005188f,0.001505f,0.002165f,-0.002449f,0.002678f,-0.000834f,-0.005177f,0.001002f,0.000676f,-0.000790f,0.000697f,-0.000013f,-0.000064f,-0.000775f,0.000000f,0.000307f,0.000239f,0.002163f,0.000937f,-0.004971f,-0.001521f,-0.002638f,0.000000f,0.000000f,-0.002302f,-0.000000f,-0.002548f,-0.001141f,-0.000513f,0.000575f,0.002476f,0.000190f,0.001976f,-0.002356f,-0.010216f,0.001099f,-0.000605f,-0.003437f,-0.000000f,0.000000f,-0.001763f,-0.004555f,-0.004665f,0.000858f,0.005383f,0.000921f,0.000535f,-0.004982f,0.001040f,-0.001556f,-0.000000f,0.007145f,-0.000157f,0.002588f,0.004429f,-0.002298f,0.001693f,0.002325f,0.000000f,-0.000716f,-0.000997f,-0.000000f,0.003510f,0.011955f,-0.000886f,0.001050f,-0.005047f,-0.003187f,0.003098f,0.001276f,-0.000035f,0.000000f,-0.014336f,-0.005405f,0.003414f,-0.003397f,-0.000828f,-0.000000f,-0.001533f,-0.002647f,0.003403f,-0.003384f,-0.002047f,-0.002262f,0.000823f,0.002991f,0.001636f,-0.006073f,-0.001050f,0.004765f,0.002666f,-0.003139f,0.001567f,0.000166f,0.002190f,0.000720f,-0.000000f,0.000186f,-0.001158f,0.000801f,-0.001693f,-0.003628f,0.002125f,0.000000f,-0.000000f,0.000980f,-0.000690f,0.005981f,0.000000f,-0.001575f,0.000000f,0.003386f,0.001789f,-0.000853f,0.001078f,-0.003672f,-0.006874f,-0.000289f,0.000000f,0.000000f,-0.003805f,0.000802f,-0.001271f,0.010132f,0.000118f,0.000848f,0.000000f,-0.000242f,-0.000116f,0.004993f,-0.000000f,0.000000f,0.006126f,0.000000f,-0.009262f,0.000000f,0.001787f,0.000000f,0.017380f,-0.001030f,0.002695f,0.001689f,-0.002060f,-0.001187f,-0.000520f,-0.010895f,0.000000f,-0.007385f,0.000142f,-0.000000f,0.002235f,0.004250f,
        0.000525f,-0.000440f,-0.000630f,-0.000000f,0.001350f,0.000000f,0.000000f,-0.004089f,0.002016f,0.009613f,0.000427f,0.002640f,0.000907f,0.000000f,0.000000f,-0.001580f,-0.003050f,-0.001298f,0.002747f,-0.005699f,0.002455f,0.000000f,0.003448f,-0.004002f,0.000000f,0.002102f,-0.000983f,0.003994f,-0.003120f,0.001826f,0.001107f,-0.000000f,0.001491f,0.001936f,0.001413f,-0.000022f,0.000000f,0.000071f,-0.002279f,0.004932f,0.004799f,-0.003735f,0.001191f,-0.000226f,-0.001896f,0.002169f,0.004852f,0.001326f,0.000300f,-0.001069f,0.000000f,-0.004025f,-0.002382f,-0.001361f,-0.002197f,0.000023f,0.000000f,-0.001485f,-0.001476f,-0.002951f,-0.000330f,-0.002752f,0.003387f,-0.001623f,-0.002424f,0.000188f,0.000418f,-0.000147f,0.000953f,0.000826f,0.000483f,-0.000607f,-0.001410f,-0.005379f,-0.003204f,0.001206f,-0.005974f,-0.013397f,-0.000339f,0.002005f,-0.004272f,-0.007389f,-0.000000f,-0.001161f,-0.001048f,-0.003855f,-0.000998f,-0.002726f,0.007114f,0.005058f,0.000915f,0.003500f,0.004814f,0.000000f,0.001911f,-0.000314f,-0.000038f,-0.000507f,0.005592f,0.000386f,-0.000000f,-0.000014f,-0.004395f,0.005619f,-0.000655f,-0.000307f,-0.003885f,-0.004921f,-0.001423f,-0.002167f,-0.004536f,0.000070f,0.003622f,-0.001085f,0.001817f,0.000661f,-0.000046f,0.010864f,-0.001035f,0.000000f,-0.000000f,-0.001678f,0.004177f,0.000140f,-0.000000f,-0.002981f,-0.003536f,0.002205f,-0.000000f,-0.000214f,-0.000157f,-0.000779f,0.004299f,-0.006432f,-0.002037f,-0.004570f,0.001760f,-0.006554f,-0.000187f,0.001638f,-0.000000f,0.002218f,-0.000453f,0.000148f,-0.000169f,-0.000547f,-0.001398f,0.004066f,-0.001094f,-0.004513f,-0.002760f,0.003656f,0.002447f,-0.000000f,0.001409f,0.010498f,-0.001151f,-0.000068f,-0.004238f,0.000322f,-0.000313f,0.000000f,0.000000f,-0.008873f,-0.001190f,-0.000754f,0.000554f,-0.000806f,0.003609f,-0.009354f,-0.000000f,-0.001137f,-0.007996f,0.001689f,0.003082f,-0.000000f,-0.001478f,0.002089f,-0.002094f,0.001925f,-0.001004f,-0.000774f,0.007038f,-0.000000f,-0.002094f,-0.000805f,-0.000098f,-0.001733f,0.001532f,-0.003128f,-0.001118f,0.001119f,-0.001993f,-0.002148f,0.001390f,-0.000000f,-0.000000f,-0.007935f,-0.002064f,0.001566f,
        -0.000512f,-0.000666f,-0.004128f,0.001158f,0.002584f,-0.004208f,-0.000000f,-0.001262f,0.000186f,-0.004410f,0.000517f,-0.002033f,0.000345f,0.002815f,-0.002098f,-0.002090f,-0.003532f,0.001748f,-0.004929f,0.000423f,0.002651f,0.006565f,0.000218f,-0.000240f,0.000323f,-0.007935f,-0.000000f,0.002592f,-0.001454f,0.000793f,-0.004951f,-0.002523f,-0.001609f,0.002998f,0.005863f,-0.002905f,0.005833f,0.000238f,-0.003031f,0.001695f,-0.003532f,0.008369f,-0.006298f,0.000868f,0.000782f,-0.003668f,0.000269f,0.000000f,0.004360f,-0.003469f,-0.000221f,-0.004768f,-0.000733f,0.005257f,-0.000761f,-0.000356f,-0.000810f,-0.000552f,-0.001456f,-0.002787f,0.013039f,0.002201f,0.001795f,-0.000896f,-0.000751f,0.000822f,-0.026199f,-0.000670f,0.000958f,0.001204f,0.000766f,-0.000273f,-0.000000f,-0.000292f,0.004204f,-0.001169f,-0.001179f,-0.000000f,-0.000181f,0.004395f,0.000488f,-0.001472f,0.000116f,0.002487f,-0.004459f,0.000000f,-0.000000f,0.004196f,-0.006332f,-0.001316f,-0.001669f,0.003080f,0.000169f,0.000864f,0.012398f,-0.000000f,-0.009621f,-0.033203f,0.001202f,-0.001456f,-0.000678f,-0.001518f,-0.002508f,0.001543f,0.003483f,-0.001178f,0.000000f,0.000809f,0.000000f,-0.003649f,0.000000f,0.000000f,0.004505f,0.000000f,-0.002516f,-0.004669f,-0.001613f,0.000011f,0.000000f,0.001948f,-0.001212f,0.002110f,-0.000000f,-0.000000f,0.000286f,0.003561f,-0.000948f,0.000856f,0.001290f,0.007668f,-0.000000f,-0.001039f,0.001267f,-0.000000f,0.000000f,0.006001f,-0.000237f,0.022308f,0.006187f,-0.000000f,-0.000371f,0.001345f,-0.000000f,0.000657f,-0.002151f,-0.000000f,-0.000000f,-0.001068f,-0.000035f,-0.002939f,-0.001109f,-0.000000f,-0.002169f,0.006241f,-0.002123f,-0.001348f,0.001861f,0.007488f,-0.004456f,-0.002884f,0.005337f,-0.000000f,0.000721f,-0.003561f,-0.001917f,0.000000f,-0.015556f,0.003035f,0.000250f,0.000000f,-0.000000f,-0.000000f,-0.002247f,-0.000000f,-0.002508f,-0.000000f,0.001122f,0.002531f,-0.000000f,-0.001425f,-0.001085f,0.005943f,-0.004101f,-0.001459f,0.004307f,-0.014061f,-0.000107f,0.012192f,0.002537f,-0.002701f,-0.003300f,0.000000f,0.000710f,0.003294f,-0.000000f,-0.000013f,-0.005058f,-0.001974f,0.000037f,0.001573f,
        0.001453f,0.003590f,-0.000205f,0.002554f,-0.000000f,0.001493f,-0.001795f,-0.001280f,-0.003983f,-0.002111f,0.019714f,-0.000439f,0.000000f,-0.003033f,-0.002594f,0.000000f,0.016876f,-0.000000f,-0.006016f,0.001148f,-0.000949f,0.004948f,0.002598f,-0.000299f,0.010506f,-0.000491f,-0.008240f,0.000133f,-0.000067f,-0.001099f,0.001133f,-0.003105f,-0.005993f,0.000657f,0.000000f,-0.000738f,-0.001465f,0.000000f,0.003561f,0.004772f,0.009361f,0.001212f,0.000894f,0.000000f,-0.000345f,-0.001807f,-0.001359f,0.002579f,-0.000000f,-0.001143f,0.002825f,0.002676f,-0.001188f,-0.003414f,0.000000f,0.003521f,0.001036f,0.000077f,-0.001732f,-0.000935f,-0.004787f,-0.000858f,0.000340f,-0.000000f,0.000713f,-0.000833f,-0.001572f,-0.002594f,-0.000000f,-0.001834f,-0.006142f,-0.003511f,0.002533f,-0.000000f,-0.006416f,0.001238f,-0.001153f,0.000477f,0.004700f,0.000381f,-0.000986f,0.001345f,-0.000000f,0.000000f,0.001106f,0.001360f,-0.000619f,0.000000f,-0.000262f,0.000760f,0.000053f,-0.009972f,-0.002087f,0.001577f,0.000000f,-0.000000f,-0.005898f,0.000404f,-0.006474f,-0.001306f,0.000131f,-0.002264f,0.000918f,0.000000f,-0.001424f,0.002472f,0.002441f,0.006630f,-0.005539f,0.000138f,-0.000417f,-0.003420f,-0.000442f,-0.005222f,-0.002502f,-0.001299f,0.000000f,-0.000972f,-0.000864f,-0.006813f,0.000745f,-0.000000f,0.001005f,0.003426f,0.003845f,-0.001038f,-0.001907f,-0.002880f,-0.001082f,0.006550f,-0.000694f,0.000000f,-0.000269f,-0.002268f,-0.000000f,-0.003891f,0.000000f,0.000683f,-0.000000f,-0.004913f,0.005341f,-0.001409f,0.002935f,0.001576f,0.001919f,0.001363f,0.001843f,0.004601f,0.000000f,0.005493f,0.000240f,0.000082f,-0.003006f,-0.002417f,-0.000344f,0.001166f,-0.005123f,0.003439f,-0.000296f,-0.001272f,0.001152f,-0.000434f,0.002300f,0.000359f,-0.002769f,-0.001999f,0.001615f,-0.002388f,-0.000000f,-0.000829f,-0.000165f,-0.000448f,-0.000815f,-0.000210f,0.007076f,-0.001044f,-0.000165f,-0.001697f,-0.011467f,0.000179f,0.003773f,0.003752f,-0.005577f,-0.000471f,0.000534f,-0.003263f,-0.002800f,-0.004070f,-0.002373f,0.000595f,-0.001936f,-0.000000f,-0.005070f,-0.005295f,0.000166f,-0.005772f,0.000000f,0.003729f,0.000000f,0.000621f,
        -0.002239f,0.000000f,0.004200f,0.000419f,-0.022339f,-0.002262f,-0.003033f,0.001614f,-0.004272f,-0.003702f,-0.002571f,0.002649f,-0.000764f,0.007256f,-0.001821f,-0.000000f,0.000239f,-0.003210f,-0.002699f,-0.000000f,0.000000f,0.000513f,0.003002f,-0.000702f,-0.001371f,-0.000666f,-0.004223f,-0.002764f,-0.000000f,0.002043f,-0.003819f,0.004536f,0.002783f,-0.000075f,-0.001580f,-0.002285f,0.003948f,0.002508f,-0.000733f,-0.002775f,0.000386f,0.000000f,0.001420f,0.001963f,-0.002205f,-0.003761f,0.000000f,0.001179f,0.001356f,-0.004543f,-0.000357f,0.001063f,0.001799f,-0.007404f,-0.003294f,-0.000661f,0.001788f,-0.000466f,-0.000926f,0.000149f,-0.000000f,-0.000865f,0.011147f,-0.002012f,-0.000301f,0.007027f,0.005909f,0.001252f,-0.001008f,-0.002748f,-0.002329f,-0.000097f,-0.000000f,-0.000000f,0.000366f,0.000000f,-0.005333f,-0.000863f,0.000000f,-0.001662f,-0.006016f,0.001081f,0.003273f,-0.000176f,0.000000f,-0.001206f,0.000209f,0.000485f,0.000480f,-0.000921f,-0.002098f,0.002331f,0.001761f,-0.004421f,-0.001877f,0.001128f,0.000440f,0.008865f,-0.000000f,-0.000648f,-0.003971f,-0.002964f,0.002790f,0.001884f,-0.007133f,0.003878f,-0.001740f,0.003944f,0.000775f,-0.014763f,-0.001523f,-0.000696f,0.000472f,-0.000479f,-0.000234f,0.000000f,-0.002356f,0.004913f,0.000642f,0.000504f,0.000007f,0.006020f,-0.000000f,0.000277f,-0.000706f,-0.000638f,0.000000f,0.006233f,-0.000603f,-0.001248f,0.001274f,-0.003841f,0.003799f,-0.000536f,0.004848f,0.001407f,-0.005558f,0.000000f,0.007637f,-0.002583f,0.000000f,0.000358f,0.003443f,-0.004776f,0.002041f,0.000000f,0.000863f,0.001920f,0.001443f,-0.001605f,0.001684f,-0.002268f,0.000319f,0.001758f,0.000623f,-0.000000f,0.009270f,0.001005f,0.000168f,-0.000000f,0.002110f,-0.006504f,-0.001978f,0.000000f,-0.000000f,0.000949f,0.001215f,0.000659f,0.000000f,0.000278f,0.005314f,0.000000f,0.000000f,-0.000000f,-0.000226f,-0.005882f,-0.005608f,-0.005505f,-0.001595f,0.000319f,0.000029f,-0.004673f,-0.000617f,-0.000228f,-0.000000f,-0.001299f,-0.003460f,0.000900f,0.000981f,0.000463f,0.000104f,0.000455f,0.001514f,0.002428f,-0.005665f,0.000000f,0.001987f,-0.000362f,0.000000f,0.000397f,
        0.002867f,-0.001270f,-0.004547f,-0.000304f,-0.003975f,0.000259f,0.000000f,-0.002003f,0.004295f,-0.000383f,0.003351f,-0.000453f,-0.002926f,-0.000566f,0.001191f,-0.001369f,-0.000000f,-0.000637f,0.000414f,-0.000000f,-0.001961f,-0.007008f,-0.001425f,0.000036f,-0.001378f,0.002800f,-0.001119f,-0.000961f,0.002338f,0.000000f,0.001055f,0.008629f,0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.003994f,-0.000000f,-0.002602f,0.000897f,0.000000f,-0.000000f,0.000291f,-0.002628f,0.000000f,0.000870f,0.003729f,-0.002710f,-0.005310f,-0.001870f,-0.001674f,0.003101f,-0.001577f,-0.000763f,0.011452f,0.001051f,-0.002350f,-0.000271f,0.004036f,0.000310f,-0.000346f,-0.002035f,-0.005386f,0.000090f,-0.000000f,-0.002682f,0.001587f,-0.012856f,0.000094f,-0.006466f,-0.002638f,-0.006874f,0.000000f,0.000000f,-0.002201f,-0.000277f,0.000584f,0.000000f,0.000222f,0.009560f,0.000486f,-0.006233f,-0.000000f,-0.003313f,-0.011269f,0.002512f,0.004005f,0.008659f,-0.000000f,-0.007778f,0.000000f,0.003452f,-0.000000f,-0.000000f,-0.001112f,-0.001677f,-0.000331f,0.006958f,-0.000288f,-0.000175f,-0.003557f,-0.001050f,0.003778f,0.003775f,-0.007896f,-0.000000f,0.000852f,0.006756f,0.001125f,0.000015f,-0.002787f,0.000597f,0.001341f,0.001033f,0.007545f,0.001485f,-0.000182f,0.000681f,-0.000000f,0.006065f,0.001429f,-0.003727f,-0.002039f,-0.001051f,-0.002586f,0.000000f,-0.000997f,0.000198f,0.001038f,0.003016f,0.001534f,0.003378f,0.002228f,-0.000027f,-0.000395f,0.002977f,-0.000834f,-0.000000f,-0.002089f,0.000000f,-0.001034f,0.008644f,0.002100f,-0.002563f,0.000675f,0.000078f,0.002476f,-0.000882f,0.000008f,-0.006790f,-0.002062f,0.001485f,0.000290f,-0.000396f,-0.000000f,-0.000000f,0.002106f,-0.002085f,-0.004414f,0.001788f,-0.000665f,0.000000f,-0.002918f,0.010773f,-0.003986f,-0.002651f,0.006393f,-0.001709f,0.006020f,-0.004124f,-0.004192f,-0.008141f,0.003119f,-0.000580f,0.018692f,-0.000629f,-0.000000f,-0.003889f,0.000000f,0.000854f,-0.003653f,0.000000f,-0.000710f,0.000261f,-0.001437f,0.002693f,0.001045f,0.001617f,0.001157f,0.000000f,0.002007f,0.001234f,-0.001441f,0.000670f,-0.000749f,0.000937f,-0.000385f,-0.000000f,0.000000f,0.000000f,
        -0.000000f,0.000000f,0.001085f,-0.001984f,0.000000f,-0.001627f,-0.000000f,-0.005493f,0.001115f,-0.004543f,-0.000000f,-0.003445f,-0.000000f,-0.004925f,0.000475f,0.008911f,-0.000422f,0.000884f,0.004246f,0.000000f,-0.003294f,-0.002230f,-0.003300f,-0.001911f,0.002691f,-0.004829f,-0.000305f,-0.001002f,0.002256f,-0.001579f,-0.000446f,0.000592f,0.000458f,0.000864f,0.000207f,0.001672f,0.004036f,-0.000002f,-0.001831f,-0.000135f,0.001341f,-0.004997f,0.002447f,-0.006283f,0.000937f,0.000990f,0.004498f,0.004135f,0.002298f,-0.000657f,0.000000f,0.008537f,0.002712f,-0.006741f,0.000045f,0.000503f,0.006145f,0.005932f,0.007648f,0.005714f,0.001136f,-0.000913f,0.005119f,0.000034f,0.000701f,-0.005363f,-0.002640f,-0.003096f,-0.008682f,-0.000000f,-0.000410f,-0.000042f,0.008438f,-0.000344f,-0.000839f,0.000000f,0.008812f,0.007305f,-0.004196f,0.000306f,-0.003481f,0.000000f,0.002342f,-0.002228f,0.001798f,-0.003569f,-0.002462f,0.002132f,-0.003275f,-0.000144f,-0.000515f,0.002968f,0.000039f,-0.003078f,0.004604f,0.002127f,-0.003260f,-0.004360f,0.000159f,0.001068f,-0.000072f,-0.000000f,0.000000f,0.005310f,0.000726f,-0.004387f,-0.002008f,0.000000f,0.000394f,0.000000f,-0.001723f,0.000760f,0.000000f,-0.005680f,-0.000000f,-0.001287f,0.003208f,0.007813f,-0.002914f,-0.000000f,0.001046f,-0.001909f,-0.001381f,-0.000000f,0.002129f,-0.004086f,0.006191f,0.000186f,-0.000933f,0.001925f,0.000000f,0.000863f,0.001246f,0.005302f,-0.001989f,0.001131f,0.007633f,0.000131f,0.007896f,0.000799f,0.002222f,-0.000289f,0.000000f,-0.000000f,-0.000965f,0.007053f,0.000000f,0.002794f,-0.002010f,0.002634f,-0.004440f,-0.000159f,-0.001464f,-0.000000f,-0.000000f,-0.002022f,0.002710f,-0.000000f,0.000422f,-0.004578f,-0.000000f,0.002766f,0.002167f,0.000000f,0.000119f,0.001916f,-0.000129f,-0.000890f,-0.001146f,-0.000562f,0.003222f,-0.005890f,0.002733f,0.000916f,-0.001315f,0.004166f,0.000000f,0.003035f,0.000000f,-0.000328f,-0.000138f,-0.000605f,0.000990f,-0.000317f,-0.002628f,0.001354f,0.000112f,-0.001760f,-0.005524f,0.001167f,0.000000f,-0.001426f,0.001369f,0.002140f,0.001204f,0.002705f,-0.003542f,0.003933f,0.006126f,-0.000000f,
        0.000132f,-0.000530f,-0.005741f,-0.000000f,-0.003283f,-0.000113f,-0.000133f,-0.000484f,-0.001323f,-0.000000f,0.003466f,-0.001676f,-0.001936f,-0.000594f,0.001081f,0.002565f,-0.003693f,-0.001148f,0.000961f,0.016632f,0.001222f,0.002287f,-0.001890f,0.006012f,-0.000117f,0.001723f,0.007069f,0.001646f,0.000000f,-0.004086f,-0.000462f,-0.000803f,0.000741f,0.000037f,0.000000f,-0.001069f,0.000649f,-0.000918f,0.002258f,0.001667f,-0.003038f,0.002295f,0.000340f,0.000839f,0.000844f,0.001324f,0.001751f,-0.001968f,-0.001633f,0.000310f,0.000000f,0.001450f,0.002962f,0.001354f,-0.001252f,0.001886f,-0.015144f,0.005779f,-0.000233f,-0.005348f,0.000090f,-0.000000f,-0.005310f,-0.003071f,-0.000254f,0.006020f,-0.007149f,0.000641f,0.000939f,-0.001296f,0.000517f,-0.007744f,-0.000398f,-0.002300f,0.001846f,-0.001418f,-0.015381f,-0.000317f,0.006680f,-0.008301f,-0.001577f,-0.000000f,0.005550f,-0.005547f,0.000000f,0.003948f,0.000527f,-0.001209f,0.001154f,-0.001319f,0.002806f,0.003660f,0.000853f,0.003716f,0.001222f,0.000509f,-0.000000f,-0.000326f,-0.004456f,0.000825f,0.000763f,-0.001725f,-0.000000f,0.020599f,0.003252f,0.015732f,-0.002274f,-0.001480f,-0.000377f,-0.026123f,-0.000000f,0.000699f,0.000651f,0.000099f,-0.003551f,0.000965f,-0.000000f,-0.002565f,-0.000559f,0.003422f,0.002136f,-0.004700f,0.000000f,0.001495f,-0.001395f,-0.000982f,0.000576f,0.001642f,-0.002726f,-0.003195f,0.010612f,0.002459f,-0.000033f,0.013832f,-0.000971f,0.010056f,-0.008705f,0.001034f,-0.003721f,-0.000000f,-0.003059f,0.001355f,0.000000f,0.002066f,-0.001099f,0.000000f,-0.005512f,-0.001620f,-0.002970f,-0.004639f,-0.000261f,0.000834f,0.003561f,0.005211f,0.000223f,0.000000f,-0.006916f,-0.051697f,0.001846f,-0.008095f,0.001764f,-0.000000f,0.004883f,0.000523f,0.000343f,-0.001589f,-0.001946f,-0.000278f,-0.000032f,0.004654f,0.003059f,0.001076f,0.002552f,0.002562f,0.000000f,0.000278f,-0.000460f,-0.001231f,0.000413f,0.000702f,0.000896f,-0.001051f,0.003407f,0.000347f,0.002857f,-0.001203f,0.002899f,0.002556f,0.000717f,0.000842f,-0.000000f,-0.000206f,-0.000393f,0.000000f,0.000946f,-0.013962f,-0.000558f,0.001529f,-0.000487f,0.000501f,
        0.006786f,0.002310f,-0.004089f,0.004967f,-0.000852f,-0.003313f,-0.001720f,0.000121f,-0.000000f,0.004982f,0.004143f,0.002922f,0.000000f,0.000098f,-0.000059f,-0.000938f,-0.001611f,0.002596f,-0.006092f,-0.007122f,-0.001358f,0.002687f,0.002005f,-0.000000f,-0.000797f,-0.004978f,-0.002325f,-0.000144f,-0.005920f,0.010223f,0.010246f,-0.001196f,-0.000000f,-0.000049f,0.001552f,0.003792f,-0.007633f,-0.003769f,-0.000863f,0.000071f,-0.004227f,-0.001810f,0.001423f,-0.000000f,0.004486f,0.000420f,0.001661f,0.000000f,-0.000737f,-0.004433f,-0.003757f,-0.020279f,-0.000317f,0.001815f,0.000136f,-0.000000f,0.003036f,-0.002857f,0.002794f,-0.007732f,-0.000527f,0.004448f,0.012932f,0.000000f,-0.001225f,-0.002226f,0.000192f,-0.001649f,0.002810f,-0.002256f,0.003361f,0.000000f,-0.000000f,-0.004585f,0.000596f,0.001107f,0.015915f,0.005032f,0.000000f,-0.001670f,0.002964f,-0.004417f,-0.000000f,0.003414f,0.000697f,-0.000000f,0.001659f,0.006958f,-0.003487f,-0.004566f,-0.002525f,-0.001866f,-0.000346f,-0.003275f,-0.002008f,0.000391f,0.004818f,0.000000f,0.002337f,-0.003674f,-0.003479f,-0.003139f,-0.000764f,0.000883f,-0.000000f,-0.001021f,0.000000f,-0.000000f,0.004318f,-0.003792f,0.002165f,0.003328f,0.000000f,0.001140f,0.001496f,0.002661f,0.000319f,0.000909f,-0.001311f,-0.003424f,0.000000f,-0.001440f,0.007942f,0.000000f,0.000586f,0.000531f,-0.001060f,-0.005238f,-0.000038f,-0.000000f,-0.002455f,0.003948f,-0.003687f,-0.000000f,-0.001733f,0.000433f,-0.001078f,-0.008568f,0.000752f,0.000623f,0.000000f,0.004395f,0.001728f,-0.000200f,0.000641f,-0.002325f,0.010956f,-0.000889f,-0.000000f,0.000000f,-0.001656f,-0.003372f,0.002523f,0.000000f,-0.002268f,-0.000040f,0.006523f,0.000000f,-0.006031f,-0.003063f,0.003134f,0.002213f,0.012451f,-0.001730f,0.001889f,0.002039f,0.000000f,-0.002193f,0.000461f,0.000809f,-0.004723f,-0.001410f,-0.001649f,0.002476f,-0.000000f,-0.006172f,0.000146f,-0.003258f,-0.000194f,0.009544f,0.001154f,-0.003443f,0.000597f,-0.000188f,-0.002581f,0.010628f,-0.000743f,0.000740f,-0.000875f,0.004486f,-0.002968f,-0.000929f,-0.000808f,-0.001288f,0.000792f,-0.002516f,0.000438f,0.000000f,-0.004578f,0.001414f,
        -0.000566f,-0.005653f,0.001660f,0.006054f,-0.003639f,0.001698f,-0.000000f,0.000941f,0.005318f,0.001775f,0.008369f,-0.004372f,0.001530f,-0.000872f,0.017227f,-0.011986f,0.000761f,0.000940f,-0.000000f,0.000739f,0.005520f,-0.005424f,-0.004425f,0.000745f,0.001333f,-0.000000f,-0.004147f,0.001407f,0.000775f,-0.001502f,0.000042f,0.002697f,0.001824f,-0.005852f,-0.004051f,0.003052f,-0.000000f,-0.000000f,0.000000f,-0.000169f,-0.001441f,-0.001237f,-0.002186f,-0.000322f,0.000000f,-0.000339f,0.004181f,0.004494f,-0.001390f,0.001180f,0.004585f,0.002048f,0.004002f,-0.000000f,0.000589f,0.000953f,0.001920f,-0.000978f,0.000406f,-0.006424f,-0.000597f,0.002882f,0.003258f,-0.003132f,-0.008240f,-0.005428f,-0.000228f,0.000677f,-0.000000f,-0.000000f,-0.008636f,-0.007240f,0.002253f,0.000000f,-0.008858f,-0.000000f,0.006069f,0.006268f,-0.001053f,0.000479f,-0.001463f,0.001079f,-0.000000f,0.000000f,0.007504f,-0.000699f,0.001524f,-0.000000f,0.000915f,-0.000300f,-0.001965f,0.000705f,0.001756f,-0.000203f,0.004070f,-0.000000f,0.000000f,-0.003464f,0.006348f,0.002197f,-0.007271f,0.003922f,-0.012695f,-0.002054f,0.002457f,-0.003372f,0.000254f,-0.002539f,0.004139f,0.000000f,0.000960f,-0.002581f,-0.000272f,-0.002178f,0.002947f,0.001646f,0.008949f,0.001142f,-0.000214f,0.000809f,-0.000112f,0.001757f,0.001177f,-0.002666f,0.005463f,-0.002737f,0.005817f,-0.000000f,0.000519f,0.001001f,-0.000000f,0.003519f,-0.000629f,0.003941f,-0.004921f,-0.000502f,-0.004913f,0.003901f,-0.002001f,-0.000505f,-0.004517f,-0.004425f,0.003042f,-0.000000f,-0.007675f,-0.001820f,-0.000818f,-0.001081f,-0.000388f,0.001730f,0.001160f,-0.000437f,0.000000f,0.000000f,0.000158f,0.000509f,0.000528f,0.000000f,0.000283f,0.000635f,-0.002043f,-0.002832f,-0.000000f,0.000249f,-0.012405f,-0.002775f,0.001397f,0.000840f,-0.000469f,0.000551f,-0.001349f,0.000668f,0.001115f,0.004707f,0.001315f,0.000000f,0.000139f,-0.001472f,0.000385f,-0.001350f,0.000779f,0.000361f,-0.000000f,0.000680f,0.001466f,-0.000853f,0.000000f,-0.000000f,0.000000f,-0.006294f,0.000000f,-0.000074f,-0.000689f,0.006351f,0.000000f,-0.002058f,-0.001004f,-0.000000f,-0.000000f,-0.003704f,
        0.001682f,0.000795f,-0.000480f,-0.000376f,-0.001739f,0.000441f,-0.007858f,-0.008636f,0.002487f,-0.000000f,0.002264f,-0.000730f,-0.000357f,-0.001398f,-0.000641f,0.001082f,0.002304f,0.004776f,-0.005608f,0.009743f,0.001159f,0.000746f,0.011848f,0.009117f,-0.000228f,0.002947f,-0.001170f,0.006683f,-0.000000f,-0.000519f,0.001728f,0.007694f,-0.019547f,-0.002048f,-0.000000f,0.000000f,-0.000000f,-0.001303f,-0.000000f,0.005844f,-0.009323f,0.004478f,-0.008507f,-0.000000f,0.007988f,0.000155f,-0.004543f,-0.000000f,-0.001126f,-0.000000f,-0.000516f,0.000000f,0.000000f,0.000000f,-0.000746f,0.001032f,-0.025467f,-0.001786f,0.005882f,0.002993f,-0.003588f,0.000000f,0.006500f,-0.013428f,-0.000000f,0.007050f,-0.000000f,-0.000000f,-0.000719f,-0.000000f,-0.007858f,0.000000f,0.004124f,0.001347f,-0.003998f,0.000823f,0.001588f,0.005249f,0.002344f,0.000898f,-0.004425f,0.001698f,-0.002916f,0.000000f,0.000000f,0.001965f,-0.001684f,-0.003220f,0.005688f,-0.000000f,0.001941f,-0.003901f,0.001375f,0.001815f,0.000608f,-0.000238f,-0.002794f,-0.004921f,-0.001477f,0.009842f,-0.000107f,-0.000390f,0.000405f,-0.002483f,-0.004604f,-0.004761f,-0.000656f,-0.004391f,-0.000000f,0.003775f,-0.000325f,0.000000f,-0.002438f,0.000782f,0.004498f,-0.002750f,-0.000000f,-0.009758f,0.009308f,0.003061f,-0.002720f,0.012123f,-0.000106f,0.002869f,0.001520f,0.005272f,0.002642f,-0.000497f,-0.000678f,0.000875f,0.002539f,-0.002445f,-0.000267f,0.000461f,-0.001689f,-0.001215f,-0.000000f,-0.000000f,-0.000000f,0.000491f,-0.003971f,-0.000000f,0.004311f};

    // =====================================================================================================================================
    // Main computation loop
    uint iterations = MAIN_LOOP_ELEMENTS_COUNT / (TILE_IFM * SIMD);
    __attribute__((opencl_unroll_hint(1)))
    for (uint ni = 0; ni < iterations; ++ni) {
        #if DECOMPRESSION_SCALE_POST_OP
            ACCUMULATOR_VEC_TYPE acc_tmp[TILE_B] = { };
        #endif

        unroll_for(uint ki = 0; ki < (TILE_IFM * SIMD) / TILE_K; ++ki) {
//USE_SLM cal
            unroll_for (uint kii = 0; kii < TILE_K; ++kii) {
                const uint total_k = ki * TILE_K + kii;
                unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
                    unroll_for (uint fi = 0; fi < TILE_OFM; ++fi) {
                    half in_val = convert_half(1.0f);
#if DECOMPRESSION_SCALE_POST_OP
                    #if TILE_OFM > 1
                        ((ACCUMULATOR_TYPE*)(&acc_tmp[bi]))[fi] += in_val;
                    #else
                        acc_tmp[bi] += in_val;
                    #endif
#else
                    #if TILE_OFM > 1
                        ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi] += in_val;
                    #else
                        acc[bi] += in_val;
                    #endif
                    acc_count[bi][fi] += 1;
                    if (get_global_id(0) == 0 && get_global_id(1) == 0 && get_global_id(2) == 0 && bi == 0 && fi == 0) {
                        half_sum += sample_data[calc_count];
                        float_sum += sample_data[calc_count];
                        calc_count += 1;
                        debug_val += (OUTPUT_TYPE)1.0f;
                        debug_fval += 1.0f;
                    }
#endif
                    }
                }
            }
        }
        //No USE_SLM cal
#if DECOMPRESSION_SCALE_POST_OP
        unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
            unroll_for (uint fi = 0; fi < TILE_OFM; ++fi) {
                #if TILE_OFM > 1
                ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi] += ((ACCUMULATOR_TYPE*)(&acc_tmp[bi]))[fi];
                acc_count[bi][fi] += 1;
                if (get_global_id(0) == 0 && get_global_id(1) == 0 && get_global_id(2) == 0 && bi == 0 && fi == 0) {
                    calc_count += 1;
                    debug_val += (OUTPUT_TYPE)1.0f;
                    debug_fval += 1.0f;
                }
                #else
                acc[bi] += acc_tmp[bi];
                #endif
            }
        }
#endif
    }

    if (get_global_id(0) == 0 && get_global_id(1) == 0 && get_global_id(2) == 0) {
        half val0 = 2.047f;
        half val1 = val0 + 0.001f;
        half val2 = val1 + 0.001f;
        half val3 = val1 + val1;
        printf("[calc] calc_count:%d, TILE_K:%d, TILE_B:%d, TILE_OFM:%d, TILE_IFM:%d, SIMD:%d, "
                "iterations:%d, DECOMPRESSION_SCALE_GROUP_SIZE:%d, ds_post_op:%d, ((ACCUMULATOR_TYPE*)(&acc[0]))[0]:%f, debug_val:%f, debug_fval:%f,"
                "[val0:%f,(val1=val0+1):%f,(val2=val1+1):%f, (val3=val1+val1):%f]\n"
                , calc_count, TILE_K, TILE_B, TILE_OFM, TILE_IFM, SIMD, iterations, DECOMPRESSION_SCALE_GROUP_SIZE,
                 ds_post_op, ((ACCUMULATOR_TYPE*)(&acc[0]))[0], (float)debug_val, debug_fval, (float)val0, (float)val1, (float)val2, (float)val3);
        printf("half_sum: %f, float_sum: %f\n", half_sum, float_sum);
        // unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
        //     unroll_for (uint fi = 0; fi < TILE_OFM; ++fi) {
        //         printf("acc_count[%d][%d]=%d, acc_val:%f\n", bi, fi, acc_count[bi][fi], ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi]);
        //     }
        // }
    }
    // =====================================================================================================================================
    // Leftovers
#if MAIN_LOOP_ELEMENTS_COUNT % (TILE_IFM * SIMD) != 0
    // Handle leftovers in normal case without alignment correction.
    #define LEFTOVER_IFM               (MAIN_LOOP_ELEMENTS_COUNT % (TILE_IFM * SIMD))
    {
        unroll_for(uint ki = 0; ki < CEIL_DIV(LEFTOVER_IFM, TILE_K); ++ki) {
            unroll_for (uint kii = 0; kii < TILE_K; ++kii) {
                unroll_for (uint fi = 0; fi < TILE_OFM; ++fi) {
                    unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
                        const uint total_k = ki * TILE_K + kii;
                        if (total_k < LEFTOVER_IFM) {
                            INPUT0_TYPE in_val = convert_half(1.0f);
                            #if TILE_OFM > 1
                            ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi] += in_val;
                            #else
                            acc[bi] += in_val;
                            #endif
                        }
                    }
                }
            }
        }
    }
    #undef LEFTOVER_IFM
#endif // MAIN_LOOP_ELEMENTS_COUNT % (TILE_IFM * SIMD) != 0
    // =====================================================================================================================================
    // Post-processing: bias, activation, fused-ops
    ACTIVATION_VEC_TYPE activated[TILE_B] = { };
    for (uint bi = 0; bi < TILE_B; ++bi) {
        activated[bi] = TO_ACTIVATION_VEC_TYPE(acc[bi]);
    }

    OUTPUT_VEC_TYPE result[TILE_B] = { };
    unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
        result[bi] = TO_OUTPUT_VEC_TYPE(ACTIVATION_TYPED(activated[bi], ACTIVATION_PARAMS_TYPED));
    }
    // =====================================================================================================================================
    // Write results
    uint output_offset = out_f * TILE_OUT_F_PITCH + out_b * TILE_OUT_B_PITCH + OUTPUT_OFFSET;

    if (USE_BLOCK_WRITE && (TILE_OUT_F_NUM % (TILE_OFM * SIMD) == 0 || out_f + (TILE_OFM * SIMD) <= TILE_OUT_F_NUM)) {
#if IS_DYNAMIC
        #define WRITE_OUTPUT(bi) do {                                       \
                if (bi + out_b < BATCH_SIZE)                                \
                    OUTPUT_BLOCK_WRITE(output, output_offset, result[bi]);  \
                output_offset += TILE_OUT_B_PITCH;                          \
            } while (false)
#else
        #define WRITE_OUTPUT(bi) do {                                       \
                OUTPUT_BLOCK_WRITE(output, output_offset, result[bi]);      \
                output_offset += TILE_OUT_B_PITCH;                          \
            } while (false)
#endif
        CONST_LOOP(TILE_B, WRITE_OUTPUT);
        #undef WRITE_OUTPUT
    } else {
        output_offset += sglid;
        for (uint bi = 0; bi < TILE_B; ++bi) {
            for (uint fi = 0; fi < TILE_OFM; ++fi) {
                const bool should_write =
#if IS_DYNAMIC
                    bi + out_b < BATCH_SIZE &&
#endif
                    (TILE_OUT_F_NUM % (TILE_OFM * SIMD) == 0 ||
                    out_f + fi * SIMD + sglid < TILE_OUT_F_NUM);
                if (should_write) {
                    output[output_offset] = ((OUTPUT_TYPE*)(&result[bi]))[fi];
                }
                output_offset += SIMD;
            }
            output_offset += TILE_OUT_B_PITCH - TILE_OFM * SIMD;
        }
    }
    // =====================================================================================================================================
}

// Dyc Quantize
#if USE_SLM && DYNAMIC_QUANTIZE
#define PACKED_DQ_TYPE                      int
#define DQ_VEC_TYPE                         MAKE_VECTOR_TYPE(DQ_TYPE, TILE_IFM)
#define DQ_SLM_FILTER_VEC                   MAKE_VECTOR_TYPE(DQ_TYPE, 4)
#define DQ_SLM_FILTER_PACKED_VEC            MAKE_VECTOR_TYPE(FILTER_TYPE, FILTER_LOAD_BLOCK_SIZE)
#define DQ_SLM_FILTER_UNPACKED_VEC          MAKE_VECTOR_TYPE(DQ_TYPE, FILTER_ELEMENTS_PER_LOAD)
#define DQ_FILTER_VEC_TYPE                  MAKE_VECTOR_TYPE(DQ_TYPE, TILE_K_OFM)

#define TO_DQ_TYPE(x)                       CAT(CAT(convert_, DQ_TYPE),_sat)(x)
#define TO_DQ_VEC_TYPE(x)                   CAT(convert_, DQ_VEC_TYPE)(x)
#define TO_DQ_SLM_FILTER_UNPACKED_VEC(x)  CAT(convert_, DQ_SLM_FILTER_UNPACKED_VEC)(x)
#define TO_DQ_FILTER_VEC_TYPE(x)            CAT(convert_, DQ_FILTER_VEC_TYPE)(x)

#define AS_TYPE_N_(type, n, x)  as_##type##n(x)
#define AS_TYPE_N(type, n, x)   AS_TYPE_N_(type, n, x)
#define AS_DQ_TYPE_4(x)         AS_TYPE_N(DQ_TYPE, INPUT_LOAD_SIZE, x)

inline void FUNC(fc_bf_tiled_kernel_dyn_quan)(
    OPTIONAL_SHAPE_INFO_ARG
    const __global INPUT0_TYPE* input,
    __global char* quantized_input,
    __global INPUT0_TYPE* scale,
#if DECOMPRESSION_SCALE_TERM
    const __global DECOMPRESSION_SCALE_TYPE* decompression_scale,
#endif
#if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
    const __global DECOMPRESSION_ZP_TYPE* decompression_zp,
#endif
    __global OUTPUT_TYPE* output,
    const __global FILTER_TYPE* weights
    , __local int* wei_local_mem
#if BIAS_TERM
    , const __global BIAS_TYPE* biases
#endif
#if HAS_FUSED_OPS_DECLS
    , FUSED_OPS_DECLS
#endif
) {
    uint gid = (uint)get_group_id(0);
    uint local_id = (uint)get_local_id(2);
    uint sglid = (uint)get_sub_group_local_id();

    // Dispatch as bs_fs_bsv_fsv, where bsv = DISPATCH_BSV and fsv = DISPATCH_FSV.
    // This allows more fine grained control over dispatch order than using work-groups and
    // avoids requirement of threads being available for whole work-group.
    // It could hovewer have some drawbacks like not providing physical locality or not using
    // full dispatch pipeline.
    uint feature_mini_block = gid % DISPATCH_FSV;
    uint batch_mini_block = gid / DISPATCH_FSV % DISPATCH_BSV;
    uint feature_mega_block = gid / (DISPATCH_FSV * DISPATCH_BSV) % (CEIL_DIV(TILE_OUT_F_NUM, TILE_OFM * SIMD) / DISPATCH_FSV);
    uint batch_mega_block = gid / (DISPATCH_FSV * DISPATCH_BSV * CEIL_DIV(TILE_OUT_F_NUM, TILE_OFM * SIMD) / DISPATCH_FSV);

    FILTER_VEC_TYPE wei = 0;

    uint out_f = gid * (TILE_OFM * SIMD);
    uint out_b = LWS_BATCHES * TILE_B * (uint)get_group_id(2) + local_id * TILE_B;

#if OUTPUT_3D
    uint out_b0 = out_b / OUTPUT_FEATURE_NUM;
    uint out_b1 = out_b % OUTPUT_FEATURE_NUM;
    uint input_offset = out_b0 * INPUT0_BATCH_PITCH + out_b1 * INPUT0_FEATURE_PITCH + INPUT0_OFFSET;
#else
    uint input_offset = out_b * TILE_IN_B_PITCH + INPUT0_OFFSET;
#endif

    uint weights_offset = out_f * (INPUT_ELEMENTS_COUNT / 2);

    ACCUMULATOR_VEC_TYPE    acc[TILE_B] = { };

    // Dynamic Quantize
    MAKE_VECTOR_TYPE(DQ_TYPE, INPUT_LOAD_SIZE)      tiled_input_0[HALF_TILE_B] = { };   // Load 4 linear inputs for packing
    PACKED_DQ_TYPE                                  packed_in_0[HALF_TILE_B] = { };     // Packing char4 inputs to 1 integer
    INPUT0_TYPE                                     de_quantize_scale[TILE_B];

#if COMPRESSED_WEIGHTS && DECOMPRESSION_SCALE_GROUPS_NUM == 1
    #if DECOMPRESSION_SCALE_LENGTH > 1 && DECOMPRESSION_SCALE_LENGTH % (TILE_OFM * SIMD) == 0
        ACCUMULATOR_VEC_TYPE d_scale = TO_ACCUMULATOR_VEC_TYPE(BLOCK_READN(DECOMPRESSION_SCALE_TYPE, TILE_OFM, decompression_scale, out_f));
    #elif DECOMPRESSION_SCALE_LENGTH > 1 && DECOMPRESSION_SCALE_LENGTH % (TILE_OFM * SIMD) != 0
        ACCUMULATOR_VEC_TYPE d_scale = 0;
        unroll_for(uint of = 0; of < TILE_OFM; ++of) {
            uint offset = out_f + of*SIMD + get_sub_group_local_id();
            if (offset < DECOMPRESSION_SCALE_LENGTH)
                ((ACCUMULATOR_TYPE*)(&d_scale))[of] = decompression_scale[offset];
        }
    #else
        ACCUMULATOR_VEC_TYPE d_scale = decompression_scale[0];
    #endif

    ACCUMULATOR_TYPE* d_scales = (ACCUMULATOR_TYPE*)(&d_scale);
#endif

#if COMPRESSED_WEIGHTS && DECOMPRESSION_ZP_TERM && DECOMPRESSION_ZP_GROUPS_NUM == 1 && !DECOMPRESSION_ZP_SCALAR
    #if DECOMPRESSION_ZP_LENGTH > 1 && DECOMPRESSION_ZP_LENGTH % (TILE_OFM * SIMD) == 0
        ACCUMULATOR_VEC_TYPE d_zp = TO_ACCUMULATOR_VEC_TYPE(BLOCK_READN(DECOMPRESSION_ZP_TYPE, TILE_OFM, decompression_zp, out_f));
    #elif DECOMPRESSION_ZP_LENGTH > 1 && DECOMPRESSION_ZP_LENGTH % (TILE_OFM * SIMD) != 0
        ACCUMULATOR_VEC_TYPE d_zp = 0;
        unroll_for(uint of = 0; of < TILE_OFM; ++of) {
            uint offset = out_f + of*SIMD + get_sub_group_local_id();
            if (offset < DECOMPRESSION_ZP_LENGTH)
                ((ACCUMULATOR_TYPE*)(&d_zp))[of] = decompression_zp[offset];
        }
    #else
        ACCUMULATOR_VEC_TYPE d_zp = decompression_zp[0];
    #endif
    ACCUMULATOR_TYPE* d_zps = (ACCUMULATOR_TYPE*)(&d_zp);
#endif

    // =====================================================================================================================================
    // Main computation loop
    const uint iterations = MAIN_LOOP_ELEMENTS_COUNT / (TILE_IFM * SIMD);
    // Each sub-group loads 2 Batch 
    uint idx_sglid = (sglid * TILE_K) % QUANTIZE_GROUP_SIZE;       // same index for sglid 0~7 : to tile_k direction
    uint batch_sglid = (sglid * TILE_K) / QUANTIZE_GROUP_SIZE;     // 0 to 1 : to batch direction

    __attribute__((opencl_unroll_hint(1)))
    for (uint ni = 0; ni < iterations; ++ni) {
        uint in_offset = input_offset + (idx_sglid + batch_sglid * TILE_IN_B_PITCH);
        uint scale_offset = input_offset / QUANTIZE_GROUP_SIZE;
        for (uint bi = 0; bi < HALF_TILE_B; ++bi) {
            // Load quantizing info from pre-quantizing kernel
            tiled_input_0[bi] = vload4(0, &quantized_input[in_offset]);
            de_quantize_scale[bi * 2] = scale[scale_offset];
            de_quantize_scale[bi * 2 + 1] = scale[scale_offset+ (TILE_IN_B_PITCH/QUANTIZE_GROUP_SIZE)];

            // Packing : Get 4(B)x4(K) integer vector (packing to 4x1 vector)
            packed_in_0[bi] = as_int(tiled_input_0[bi]);

            // Next batch
            in_offset += (TILE_IN_B_PITCH * 2);
            scale_offset += (TILE_IN_B_PITCH/QUANTIZE_GROUP_SIZE * 2);
        }

        input_offset += TILE_IFM * SIMD;

        // Packing
        MAKE_VECTOR_TYPE(int, TILE_B) acc_tmp[TILE_OFM] = { };

        #if TILE_OFM != 2
        #error "FC bf_tiled kernel: can't use SLM optimization with TILE_OFM != 2"
        #endif

        // Skip first barrier synchronization if there is only single outer loop iteration.
        #if MAIN_LOOP_ELEMENTS_COUNT / (TILE_IFM * SIMD) > 1
            barrier(CLK_LOCAL_MEM_FENCE);
        #endif

        __local int* char_slm_weight = (__local int*)wei_local_mem;

        uint weights_idx = weights_offset + local_id * SIMD * FILTER_LOAD_ITERS * FILTER_LOAD_BLOCK_SIZE;
        uint wei_local_idx = local_id * SIMD * FILTER_LOAD_ITERS * (FILTER_LOAD_BLOCK_SIZE/2) + sglid * 2;

        // DECOMPRESSION_SCALE_POST_OP SHOULD be enabled for dynamic quantize FC : scale is ACCUMULATOR_VAL_ONE
        unroll_for(uint load_iter = 0; load_iter < FILTER_LOAD_ITERS; ++load_iter) {
            SLM_FILTER_PACKED_VEC wei_packed = BLOCK_READN(FILTER_TYPE, FILTER_LOAD_BLOCK_SIZE, weights, weights_idx);
            DQ_SLM_FILTER_UNPACKED_VEC dq_wei_unpacked = UNPACK_TRANSPOSED_INT4(DQ_TYPE, *((uint4x8_t *)&wei_packed));

            // Calculate zero-point and scale only for DECOMPRESSION_SCALE_POST_OP enabled
            #if DECOMPRESSION_ZP_TERM
                #if DECOMPRESSION_ZP_SCALAR
                    DQ_SLM_FILTER_UNPACKED_VEC dzp = (DQ_SLM_FILTER_UNPACKED_VEC)(DECOMPRESSION_ZP_VALUE);
                #elif DECOMPRESSION_ZP_GROUPS_NUM > 1
                    DQ_SLM_FILTER_UNPACKED_VEC dzp;
                    unroll_for(uint fi = 0; fi < TILE_OFM; ++fi) {
                        unroll_for(uint kii = 0; kii < FILTER_LOAD_BLOCK_SIZE; ++kii) {
                            const uint offset_ofm = out_f + fi*SIMD + sglid;
                            const uint offset_ifm = ni * TILE_IFM * SIMD + local_id * FILTER_LOAD_ITERS * FILTER_LOAD_BLOCK_SIZE + load_iter * FILTER_LOAD_BLOCK_SIZE + kii;
                            const uint zp_offset = (offset_ofm % DECOMPRESSION_ZP_BATCH_NUM) * DECOMPRESSION_ZP_BATCH_PITCH +
                                                    (offset_ifm / DECOMPRESSION_ZP_GROUP_SIZE) * DECOMPRESSION_ZP_FEATURE_PITCH;
                            dzp[W_IDX] = decompression_zp[zp_offset];
                        }
                    }
                #else
                    DQ_SLM_FILTER_UNPACKED_VEC dzp = (DQ_SLM_FILTER_UNPACKED_VEC)(d_zps[0]);
                #endif
            #else
                DQ_SLM_FILTER_UNPACKED_VEC dzp = (DQ_SLM_FILTER_UNPACKED_VEC)(ACCUMULATOR_VAL_ZERO);
            #endif

            // Calculate weight : w = (w - dzp) * ds
            dq_wei_unpacked -= dzp;

            #if FILTER_LOAD_BLOCK_SIZE == 2
                DQ_SLM_FILTER_VEC wei_1 = {dq_wei_unpacked.s01, dq_wei_unpacked.s23};
                char_slm_weight[wei_local_idx] = as_int(wei_1);
            #elif FILTER_LOAD_BLOCK_SIZE == 4
                DQ_SLM_FILTER_VEC wei_1 = {dq_wei_unpacked.s01, dq_wei_unpacked.s23};
                char_slm_weight[wei_local_idx] = as_int(wei_1);
                DQ_SLM_FILTER_VEC wei_2 = {dq_wei_unpacked.s45, dq_wei_unpacked.s67};
                char_slm_weight[wei_local_idx+1] = as_int(wei_2);
            #elif FILTER_LOAD_BLOCK_SIZE == 8
                DQ_SLM_FILTER_VEC wei_1 = {dq_wei_unpacked.s01, dq_wei_unpacked.s23};
                char_slm_weight[wei_local_idx] = as_int(wei_1);
                DQ_SLM_FILTER_VEC wei_2 = {dq_wei_unpacked.s45, dq_wei_unpacked.s67};
                char_slm_weight[wei_local_idx+1] = as_int(wei_2);
                DQ_SLM_FILTER_VEC wei_3 = {dq_wei_unpacked.s89, dq_wei_unpacked.sab};
                char_slm_weight[wei_local_idx+2] = as_int(wei_3);
                DQ_SLM_FILTER_VEC wei_4 = {dq_wei_unpacked.scd, dq_wei_unpacked.sef};
                char_slm_weight[wei_local_idx+3] = as_int(wei_4);
            #else
                #error "FC bf_tiled kernel: unsupported FILTER_LOAD_BLOCK_SIZE for SLM kernel"
            #endif

            wei_local_idx += SIMD * (FILTER_LOAD_BLOCK_SIZE/2);
            weights_idx += SIMD * FILTER_LOAD_BLOCK_SIZE;
        }

        wei_local_idx = sglid * 2;

        barrier(CLK_LOCAL_MEM_FENCE);

        unroll_for(uint ki = 0; ki < (TILE_IFM * SIMD) / TILE_K; ++ki) {
            #if TILE_K != 4
                #error "FC bf_tiled kernel: unsupported TILE_K size for SLM kernel"
            #endif

            // Compute input * weight : packed char4 type
            char8 weight = vload8(0, (__local char *)(&char_slm_weight[wei_local_idx + 16*2*ki]));
            char4 first_weight = weight.s0123;
            char4 second_weight = weight.s4567;
            unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
                char4 input_val = as_char4(_sub_group_shuffle(packed_in_0[bi / 2], (bi % 2) * 8 + ki));
                acc_tmp[0][bi] = imad_SW(acc_tmp[0][bi], input_val, first_weight);
                acc_tmp[1][bi] = imad_SW(acc_tmp[1][bi], input_val, second_weight);
            }

            weights_offset += TILE_K_OFM_PACKED * SIMD;

            #if DECOMPRESSION_SCALE_POST_OP && (TILE_IFM * SIMD > DECOMPRESSION_SCALE_GROUP_SIZE)
                unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
                    unroll_for(uint fi = 0; fi < TILE_OFM; ++fi) {
                        const uint offset_ofm = out_f + fi*SIMD + sglid;

                        #if DECOMPRESSION_SCALE_GROUPS_NUM > 1
                            const uint scale_offset = (offset_ofm % DECOMPRESSION_SCALE_BATCH_NUM) * DECOMPRESSION_SCALE_BATCH_PITCH +
                                                    ((ni*TILE_IFM*SIMD + ki*TILE_K) / DECOMPRESSION_SCALE_GROUP_SIZE)*DECOMPRESSION_SCALE_FEATURE_PITCH;
                            ACCUMULATOR_TYPE ds = decompression_scale[scale_offset];
                        #else
                            ACCUMULATOR_TYPE ds = d_scales[fi % DECOMPRESSION_SCALE_LENGTH];
                        #endif

                        ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi] += convert_half(((int *)(&acc_tmp[fi]))[bi]) * ds * de_quantize_scale[bi];
                        acc_tmp[fi][bi] = 0;
                    }
                }
            #endif
        }  // Whole tile_k elements of each iteration : ki

        #if DECOMPRESSION_SCALE_POST_OP && (TILE_IFM * SIMD <= DECOMPRESSION_SCALE_GROUP_SIZE)
            const uint ni_offset = ((ni*TILE_IFM*SIMD) / DECOMPRESSION_SCALE_GROUP_SIZE)*DECOMPRESSION_SCALE_FEATURE_PITCH;
            unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
                unroll_for(uint fi = 0; fi < TILE_OFM; ++fi) {
                    const uint offset_ofm = out_f + fi*SIMD + sglid;

                    #if DECOMPRESSION_SCALE_GROUPS_NUM > 1
                        const uint scale_offset = (offset_ofm % DECOMPRESSION_SCALE_BATCH_NUM) * DECOMPRESSION_SCALE_BATCH_PITCH + ni_offset;
                        ACCUMULATOR_TYPE ds = decompression_scale[scale_offset];
                    #else
                        ACCUMULATOR_TYPE ds = d_scales[fi % DECOMPRESSION_SCALE_LENGTH];
                    #endif

                    ((ACCUMULATOR_TYPE*)(&acc[bi]))[fi] += convert_half(((int *)(&acc_tmp[fi]))[bi]) * ds * de_quantize_scale[bi];
                }
            }
        #endif
    }  // Main compute loop : ni

    // =====================================================================================================================================
    // Post-processing: bias, activation, fused-ops
    ACTIVATION_VEC_TYPE activated[TILE_B] = { };
    for (uint bi = 0; bi < TILE_B; ++bi) {
        activated[bi] = TO_ACTIVATION_VEC_TYPE(acc[bi]);
    }

#if BIAS_TERM
    #if TILE_OUT_F_NUM % (TILE_OFM * SIMD) == 0
        BIAS_VEC_TYPE bias = BIAS_BLOCK_READ(biases, out_f);
    #else
        BIAS_VEC_TYPE bias = 0;
        unroll_for(uint fi = 0; fi < TILE_OFM; ++fi) {
            ((BIAS_TYPE*)(&bias))[fi] = biases[out_f + sglid + fi * SIMD];
        }
    #endif
    unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
        activated[bi] += TO_ACTIVATION_VEC_TYPE(bias);
    }
#endif

    OUTPUT_VEC_TYPE result[TILE_B] = { };
#if HAS_FUSED_OPS
    unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
    #if TILE_OFM > 1
        unroll_for(uint fi = 0; fi < TILE_OFM; ++fi) {
            FUSED_OPS_VEC;
            result[bi][fi] = FUSED_OPS_RESULT_VEC;
        }
    #else
        FUSED_OPS_SCALAR;
        result[bi] = FUSED_OPS_RESULT_SCALAR;
    #endif // TILE_OFM > 1
    }
#else
    unroll_for (uint bi = 0; bi < TILE_B; ++bi) {
        result[bi] = TO_OUTPUT_VEC_TYPE(ACTIVATION_TYPED(activated[bi], ACTIVATION_PARAMS_TYPED));
    }
#endif

    // =====================================================================================================================================
    // Write results
    uint output_offset = out_f * TILE_OUT_F_PITCH + out_b * TILE_OUT_B_PITCH + OUTPUT_OFFSET;

    if (USE_BLOCK_WRITE && (TILE_OUT_F_NUM % (TILE_OFM * SIMD) == 0 || out_f + (TILE_OFM * SIMD) <= TILE_OUT_F_NUM)) {
#if IS_DYNAMIC
        #define WRITE_OUTPUT(bi) do {                                       \
                if (bi + out_b < BATCH_SIZE)                                \
                    OUTPUT_BLOCK_WRITE(output, output_offset, result[bi]);  \
                output_offset += TILE_OUT_B_PITCH;                          \
            } while (false)
#else
        #define WRITE_OUTPUT(bi) do {                                       \
                OUTPUT_BLOCK_WRITE(output, output_offset, result[bi]);      \
                output_offset += TILE_OUT_B_PITCH;                          \
            } while (false)
#endif
        CONST_LOOP(TILE_B, WRITE_OUTPUT);
        #undef WRITE_OUTPUT
    } else {
        output_offset += sglid;

        for (uint bi = 0; bi < TILE_B; ++bi) {
            for (uint fi = 0; fi < TILE_OFM; ++fi) {
                const bool should_write =
#if IS_DYNAMIC
                    bi + out_b < BATCH_SIZE &&
#endif
                    (TILE_OUT_F_NUM % (TILE_OFM * SIMD) == 0 ||
                    out_f + fi * SIMD + sglid < TILE_OUT_F_NUM);
                if (should_write) {
                    output[output_offset] = ((OUTPUT_TYPE*)(&result[bi]))[fi];
                }
                output_offset += SIMD;
            }
            output_offset += TILE_OUT_B_PITCH - TILE_OFM * SIMD;
        }
    }
    // =====================================================================================================================================
}
#endif

REQD_SUB_GROUP_SIZE(SIMD)
KERNEL(fc)(
    OPTIONAL_SHAPE_INFO_ARG
    const __global INPUT0_TYPE* input,
#if DECOMPRESSION_SCALE_TERM
    const __global DECOMPRESSION_SCALE_TYPE* decompression_scale,
#endif
#if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
    const __global DECOMPRESSION_ZP_TYPE* decompression_zp,
#endif
    __global OUTPUT_TYPE* output,
    const __global FILTER_TYPE* weights
#if BIAS_TERM
    , const __global BIAS_TYPE* biases
#endif
#if HAS_FUSED_OPS_DECLS
    , FUSED_OPS_DECLS
#endif
#if DYNAMIC_QUANTIZE
    , __global char* quantized_input
    , __global INPUT0_TYPE* de_quan_scale
#endif
) {
#if USE_SLM
    #if DYNAMIC_QUANTIZE
        __local int dq_wei_local_mem[SIMD * TILE_OFM * SIMD];
    #else
        __local ACCUMULATOR_TYPE wei_local_mem[TILE_IFM * SIMD * TILE_OFM * SIMD];
    #endif
#endif
#if IS_DYNAMIC && COMPRESSED_WEIGHTS_INT4
    const int batch_size = BATCH_SIZE;
    if (batch_size == 1) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b1)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 2) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b2)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 3) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b3)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 4) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b4)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 5) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b5)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 6) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b6)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else if (batch_size == 7) {
        FUNC_CALL(fc_bf_tiled_kernel_forced_tile_b7)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    } else {
        #if USE_SLM && DYNAMIC_QUANTIZE
            FUNC_CALL(fc_bf_tiled_kernel_dyn_quan)(
                OPTIONAL_SHAPE_INFO_TENSOR
                input,
                quantized_input,
                de_quan_scale,
            #if DECOMPRESSION_SCALE_TERM
                decompression_scale,
            #endif
            #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
                decompression_zp,
            #endif
                output,
                weights
                , dq_wei_local_mem
            #if BIAS_TERM
                , biases
            #endif
            #if HAS_FUSED_OPS_DECLS
                , FUSED_OPS_ARGS
            #endif
            );
        #else
            FUNC_CALL(fc_bf_tiled_kernel_default)(
                OPTIONAL_SHAPE_INFO_TENSOR
                input,
            #if DECOMPRESSION_SCALE_TERM
                decompression_scale,
            #endif
            #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
                decompression_zp,
            #endif
                output,
                weights
            #if USE_SLM
                , wei_local_mem
            #endif
            #if BIAS_TERM
                , biases
            #endif
            #if HAS_FUSED_OPS_DECLS
                , FUSED_OPS_ARGS
            #endif
            );
        #endif
    }
#else
    #if USE_SLM && DYNAMIC_QUANTIZE
        FUNC_CALL(fc_bf_tiled_kernel_dyn_quan)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
            quantized_input,
            de_quan_scale,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
            , dq_wei_local_mem
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    #else
        FUNC_CALL(fc_bf_tiled_kernel_default)(
            OPTIONAL_SHAPE_INFO_TENSOR
            input,
        #if DECOMPRESSION_SCALE_TERM
            decompression_scale,
        #endif
        #if DECOMPRESSION_ZP_TERM && !DECOMPRESSION_ZP_SCALAR
            decompression_zp,
        #endif
            output,
            weights
        #if USE_SLM
            , wei_local_mem
        #endif
        #if BIAS_TERM
            , biases
        #endif
        #if HAS_FUSED_OPS_DECLS
            , FUSED_OPS_ARGS
        #endif
        );
    #endif
#endif
}
#endif  // !FC_KERNEL_DYNAMIC_QUANTIZE

#undef INPUT_VEC_TYPE
#undef ACCUMULATOR_VEC_TYPE
#undef FILTER_VEC_TYPE
#undef BIAS_VEC_TYPE
#undef OUTPUT_VEC_TYPE
#undef ACTIVATION_VEC_TYPE
#undef TO_OUTPUT_VEC_TYPE
#undef TO_ACTIVATION_VEC_TYPE

#undef INPUT_BLOCK_READ
#undef FILTER_BLOCK_READ
#undef BIAS_BLOCK_READ
#undef OUTPUT_BLOCK_WRITE

#undef USE_BLOCK_WRITE

#undef MAIN_LOOP_ELEMENTS_COUNT
